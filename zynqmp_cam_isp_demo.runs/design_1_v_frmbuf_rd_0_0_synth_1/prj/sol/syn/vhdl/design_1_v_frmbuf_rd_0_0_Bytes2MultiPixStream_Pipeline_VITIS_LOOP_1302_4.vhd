-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity design_1_v_frmbuf_rd_0_0_Bytes2MultiPixStream_Pipeline_VITIS_LOOP_1302_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_din : OUT STD_LOGIC_VECTOR (29 downto 0);
    img_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    img_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    img_full_n : IN STD_LOGIC;
    img_write : OUT STD_LOGIC;
    trunc_ln : IN STD_LOGIC_VECTOR (12 downto 0);
    icmp_ln1292 : IN STD_LOGIC_VECTOR (0 downto 0);
    cmp226_4 : IN STD_LOGIC_VECTOR (0 downto 0);
    cmp226_3 : IN STD_LOGIC_VECTOR (0 downto 0);
    cmp226_2 : IN STD_LOGIC_VECTOR (0 downto 0);
    cmp226_1 : IN STD_LOGIC_VECTOR (0 downto 0);
    bytePlanes1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    bytePlanes1_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    bytePlanes1_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    bytePlanes1_empty_n : IN STD_LOGIC;
    bytePlanes1_read : OUT STD_LOGIC;
    sub222_cast17 : IN STD_LOGIC_VECTOR (12 downto 0);
    cmp226 : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of design_1_v_frmbuf_rd_0_0_Bytes2MultiPixStream_Pipeline_VITIS_LOOP_1302_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv20_80200 : STD_LOGIC_VECTOR (19 downto 0) := "10000000001000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal or_ln1323_5_reg_366 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1302_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal icmp_ln1302_reg_342 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal or_ln1323_4_reg_362 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_predicate_op68_write_state6 : BOOLEAN;
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal bytePlanes1_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal img_blk_n : STD_LOGIC;
    signal or_ln1323_reg_346 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal or_ln1323_1_reg_350 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal or_ln1323_2_reg_354 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal or_ln1323_3_reg_358 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal or_ln1323_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1323_1_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1323_2_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1323_3_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1323_4_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1323_5_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_370 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal ap_predicate_op51_write_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_3_reg_375 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_5_reg_380 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_8_reg_385 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_s_reg_390 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal x_fu_92 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal x_2_fu_175_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_x_1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_s_fu_236_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal p_1_fu_295_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_predicate_op59_write_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal p_2_fu_303_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_predicate_op62_write_state4 : BOOLEAN;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_01001 : BOOLEAN;
    signal p_3_fu_311_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_predicate_op65_write_state5 : BOOLEAN;
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_01001 : BOOLEAN;
    signal p_4_fu_319_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_block_pp0_stage5_01001 : BOOLEAN;
    signal p_0_fu_327_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal zext_ln1302_fu_181_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub222_cast17_cast_fu_157_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal cmp223_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln674_fu_232_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component design_1_v_frmbuf_rd_0_0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component design_1_v_frmbuf_rd_0_0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    icmp_ln1302_reg_342_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                icmp_ln1302_reg_342 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    icmp_ln1302_reg_342 <= icmp_ln1302_fu_169_p2;
                end if; 
            end if;
        end if;
    end process;


    or_ln1323_1_reg_350_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                or_ln1323_1_reg_350 <= ap_const_lv1_0;
            else
                if (((icmp_ln1302_fu_169_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    or_ln1323_1_reg_350 <= or_ln1323_1_fu_197_p2;
                end if; 
            end if;
        end if;
    end process;


    or_ln1323_2_reg_354_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                or_ln1323_2_reg_354 <= ap_const_lv1_0;
            else
                if (((icmp_ln1302_fu_169_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    or_ln1323_2_reg_354 <= or_ln1323_2_fu_203_p2;
                end if; 
            end if;
        end if;
    end process;


    or_ln1323_3_reg_358_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                or_ln1323_3_reg_358 <= ap_const_lv1_0;
            else
                if (((icmp_ln1302_fu_169_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    or_ln1323_3_reg_358 <= or_ln1323_3_fu_209_p2;
                end if; 
            end if;
        end if;
    end process;


    or_ln1323_4_reg_362_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                or_ln1323_4_reg_362 <= ap_const_lv1_0;
            else
                if (((icmp_ln1302_fu_169_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    or_ln1323_4_reg_362 <= or_ln1323_4_fu_215_p2;
                end if; 
            end if;
        end if;
    end process;


    or_ln1323_5_reg_366_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                or_ln1323_5_reg_366 <= ap_const_lv1_0;
            else
                if (((icmp_ln1302_fu_169_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    or_ln1323_5_reg_366 <= or_ln1323_5_fu_221_p2;
                end if; 
            end if;
        end if;
    end process;


    or_ln1323_reg_346_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                or_ln1323_reg_346 <= ap_const_lv1_0;
            else
                if (((icmp_ln1302_fu_169_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    or_ln1323_reg_346 <= or_ln1323_fu_191_p2;
                end if; 
            end if;
        end if;
    end process;


    tmp_3_reg_375_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_3_reg_375 <= ap_const_lv10_0;
            else
                if (((icmp_ln1302_reg_342 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_3_reg_375 <= bytePlanes1_dout(29 downto 20);
                end if; 
            end if;
        end if;
    end process;


    tmp_5_reg_380_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_5_reg_380 <= ap_const_lv10_0;
            else
                if (((icmp_ln1302_reg_342 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_5_reg_380 <= bytePlanes1_dout(41 downto 32);
                end if; 
            end if;
        end if;
    end process;


    tmp_6_reg_370_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_6_reg_370 <= ap_const_lv10_0;
            else
                if (((icmp_ln1302_reg_342 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_6_reg_370 <= bytePlanes1_dout(19 downto 10);
                end if; 
            end if;
        end if;
    end process;


    tmp_8_reg_385_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_8_reg_385 <= ap_const_lv10_0;
            else
                if (((icmp_ln1302_reg_342 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_8_reg_385 <= bytePlanes1_dout(51 downto 42);
                end if; 
            end if;
        end if;
    end process;


    tmp_s_reg_390_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_s_reg_390 <= ap_const_lv10_0;
            else
                if (((icmp_ln1302_reg_342 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_s_reg_390 <= bytePlanes1_dout(61 downto 52);
                end if; 
            end if;
        end if;
    end process;


    x_fu_92_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_fu_92 <= ap_const_lv13_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    if (((icmp_ln1302_fu_169_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                        x_fu_92 <= x_2_fu_175_p2;
                    elsif ((ap_loop_init = ap_const_logic_1)) then 
                        x_fu_92 <= ap_const_lv13_0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0, ap_block_pp0_stage5_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, img_full_n, or_ln1323_5_reg_366)
    begin
                ap_block_pp0_stage0_01001 <= ((or_ln1323_5_reg_366 = ap_const_lv1_1) and (img_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, img_full_n, or_ln1323_5_reg_366)
    begin
                ap_block_pp0_stage0_11001 <= ((or_ln1323_5_reg_366 = ap_const_lv1_1) and (img_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, img_full_n, or_ln1323_5_reg_366)
    begin
                ap_block_pp0_stage0_subdone <= ((or_ln1323_5_reg_366 = ap_const_lv1_1) and (img_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter0, img_full_n, icmp_ln1302_reg_342, bytePlanes1_empty_n, ap_predicate_op51_write_state2)
    begin
                ap_block_pp0_stage1_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((img_full_n = ap_const_logic_0) and (ap_predicate_op51_write_state2 = ap_const_boolean_1)) or ((bytePlanes1_empty_n = ap_const_logic_0) and (icmp_ln1302_reg_342 = ap_const_lv1_0))));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, img_full_n, icmp_ln1302_reg_342, bytePlanes1_empty_n, ap_predicate_op51_write_state2)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((img_full_n = ap_const_logic_0) and (ap_predicate_op51_write_state2 = ap_const_boolean_1)) or ((bytePlanes1_empty_n = ap_const_logic_0) and (icmp_ln1302_reg_342 = ap_const_lv1_0))));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, img_full_n, icmp_ln1302_reg_342, bytePlanes1_empty_n, ap_predicate_op51_write_state2)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((img_full_n = ap_const_logic_0) and (ap_predicate_op51_write_state2 = ap_const_boolean_1)) or ((bytePlanes1_empty_n = ap_const_logic_0) and (icmp_ln1302_reg_342 = ap_const_lv1_0))));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_01001_assign_proc : process(ap_enable_reg_pp0_iter0, img_full_n, ap_predicate_op59_write_state3)
    begin
                ap_block_pp0_stage2_01001 <= ((img_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_op59_write_state3 = ap_const_boolean_1));
    end process;


    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0, img_full_n, ap_predicate_op59_write_state3)
    begin
                ap_block_pp0_stage2_11001 <= ((img_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_op59_write_state3 = ap_const_boolean_1));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, img_full_n, ap_predicate_op59_write_state3)
    begin
                ap_block_pp0_stage2_subdone <= ((img_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_op59_write_state3 = ap_const_boolean_1));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_01001_assign_proc : process(ap_enable_reg_pp0_iter0, img_full_n, ap_predicate_op62_write_state4)
    begin
                ap_block_pp0_stage3_01001 <= ((img_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_op62_write_state4 = ap_const_boolean_1));
    end process;


    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter0, img_full_n, ap_predicate_op62_write_state4)
    begin
                ap_block_pp0_stage3_11001 <= ((img_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_op62_write_state4 = ap_const_boolean_1));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, img_full_n, ap_predicate_op62_write_state4)
    begin
                ap_block_pp0_stage3_subdone <= ((img_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_op62_write_state4 = ap_const_boolean_1));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_01001_assign_proc : process(ap_enable_reg_pp0_iter0, img_full_n, ap_predicate_op65_write_state5)
    begin
                ap_block_pp0_stage4_01001 <= ((img_full_n = ap_const_logic_0) and (ap_predicate_op65_write_state5 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage4_11001_assign_proc : process(ap_enable_reg_pp0_iter0, img_full_n, ap_predicate_op65_write_state5)
    begin
                ap_block_pp0_stage4_11001 <= ((img_full_n = ap_const_logic_0) and (ap_predicate_op65_write_state5 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, img_full_n, ap_predicate_op65_write_state5)
    begin
                ap_block_pp0_stage4_subdone <= ((img_full_n = ap_const_logic_0) and (ap_predicate_op65_write_state5 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_01001_assign_proc : process(ap_enable_reg_pp0_iter0, img_full_n, ap_predicate_op68_write_state6)
    begin
                ap_block_pp0_stage5_01001 <= ((ap_predicate_op68_write_state6 = ap_const_boolean_1) and (img_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage5_11001_assign_proc : process(ap_enable_reg_pp0_iter0, img_full_n, ap_predicate_op68_write_state6)
    begin
                ap_block_pp0_stage5_11001 <= ((ap_predicate_op68_write_state6 = ap_const_boolean_1) and (img_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage5_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, img_full_n, ap_predicate_op68_write_state6)
    begin
                ap_block_pp0_stage5_subdone <= ((ap_predicate_op68_write_state6 = ap_const_boolean_1) and (img_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage1_iter0_assign_proc : process(img_full_n, icmp_ln1302_reg_342, bytePlanes1_empty_n, ap_predicate_op51_write_state2)
    begin
                ap_block_state2_pp0_stage1_iter0 <= (((img_full_n = ap_const_logic_0) and (ap_predicate_op51_write_state2 = ap_const_boolean_1)) or ((bytePlanes1_empty_n = ap_const_logic_0) and (icmp_ln1302_reg_342 = ap_const_lv1_0)));
    end process;


    ap_block_state3_pp0_stage2_iter0_assign_proc : process(img_full_n, ap_predicate_op59_write_state3)
    begin
                ap_block_state3_pp0_stage2_iter0 <= ((img_full_n = ap_const_logic_0) and (ap_predicate_op59_write_state3 = ap_const_boolean_1));
    end process;


    ap_block_state4_pp0_stage3_iter0_assign_proc : process(img_full_n, ap_predicate_op62_write_state4)
    begin
                ap_block_state4_pp0_stage3_iter0 <= ((img_full_n = ap_const_logic_0) and (ap_predicate_op62_write_state4 = ap_const_boolean_1));
    end process;


    ap_block_state5_pp0_stage4_iter0_assign_proc : process(img_full_n, ap_predicate_op65_write_state5)
    begin
                ap_block_state5_pp0_stage4_iter0 <= ((img_full_n = ap_const_logic_0) and (ap_predicate_op65_write_state5 = ap_const_boolean_1));
    end process;


    ap_block_state6_pp0_stage5_iter0_assign_proc : process(img_full_n, ap_predicate_op68_write_state6)
    begin
                ap_block_state6_pp0_stage5_iter0 <= ((ap_predicate_op68_write_state6 = ap_const_boolean_1) and (img_full_n = ap_const_logic_0));
    end process;


    ap_block_state7_pp0_stage0_iter1_assign_proc : process(img_full_n, or_ln1323_5_reg_366)
    begin
                ap_block_state7_pp0_stage0_iter1 <= ((or_ln1323_5_reg_366 = ap_const_lv1_1) and (img_full_n = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln1302_fu_169_p2)
    begin
        if (((icmp_ln1302_fu_169_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_predicate_op51_write_state2_assign_proc : process(icmp_ln1302_reg_342, or_ln1323_reg_346)
    begin
                ap_predicate_op51_write_state2 <= ((icmp_ln1302_reg_342 = ap_const_lv1_0) and (or_ln1323_reg_346 = ap_const_lv1_1));
    end process;


    ap_predicate_op59_write_state3_assign_proc : process(icmp_ln1302_reg_342, or_ln1323_1_reg_350)
    begin
                ap_predicate_op59_write_state3 <= ((icmp_ln1302_reg_342 = ap_const_lv1_0) and (or_ln1323_1_reg_350 = ap_const_lv1_1));
    end process;


    ap_predicate_op62_write_state4_assign_proc : process(icmp_ln1302_reg_342, or_ln1323_2_reg_354)
    begin
                ap_predicate_op62_write_state4 <= ((icmp_ln1302_reg_342 = ap_const_lv1_0) and (or_ln1323_2_reg_354 = ap_const_lv1_1));
    end process;


    ap_predicate_op65_write_state5_assign_proc : process(icmp_ln1302_reg_342, or_ln1323_3_reg_358)
    begin
                ap_predicate_op65_write_state5 <= ((icmp_ln1302_reg_342 = ap_const_lv1_0) and (or_ln1323_3_reg_358 = ap_const_lv1_1));
    end process;


    ap_predicate_op68_write_state6_assign_proc : process(icmp_ln1302_reg_342, or_ln1323_4_reg_362)
    begin
                ap_predicate_op68_write_state6 <= ((or_ln1323_4_reg_362 = ap_const_lv1_1) and (icmp_ln1302_reg_342 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_x_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, x_fu_92, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_x_1 <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_x_1 <= x_fu_92;
        end if; 
    end process;


    bytePlanes1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln1302_reg_342, bytePlanes1_empty_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if (((icmp_ln1302_reg_342 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            bytePlanes1_blk_n <= bytePlanes1_empty_n;
        else 
            bytePlanes1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    bytePlanes1_read_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln1302_reg_342, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln1302_reg_342 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            bytePlanes1_read <= ap_const_logic_1;
        else 
            bytePlanes1_read <= ap_const_logic_0;
        end if; 
    end process;

    cmp223_fu_185_p2 <= "1" when (signed(zext_ln1302_fu_181_p1) < signed(sub222_cast17_cast_fu_157_p1)) else "0";
    icmp_ln1302_fu_169_p2 <= "1" when (ap_sig_allocacmp_x_1 = trunc_ln) else "0";

    img_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, img_full_n, or_ln1323_5_reg_366, ap_CS_fsm_pp0_stage5, icmp_ln1302_reg_342, ap_predicate_op68_write_state6, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, or_ln1323_reg_346, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, or_ln1323_1_reg_350, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, or_ln1323_2_reg_354, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, or_ln1323_3_reg_358, ap_block_pp0_stage5, ap_block_pp0_stage0)
    begin
        if ((((ap_predicate_op68_write_state6 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((icmp_ln1302_reg_342 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (or_ln1323_3_reg_358 = ap_const_lv1_1)) or ((icmp_ln1302_reg_342 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (or_ln1323_2_reg_354 = ap_const_lv1_1)) or ((icmp_ln1302_reg_342 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (or_ln1323_1_reg_350 = ap_const_lv1_1)) or ((icmp_ln1302_reg_342 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (or_ln1323_reg_346 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln1323_5_reg_366 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            img_blk_n <= img_full_n;
        else 
            img_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_din_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, or_ln1323_5_reg_366, ap_CS_fsm_pp0_stage5, ap_predicate_op68_write_state6, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_predicate_op51_write_state2, p_s_fu_236_p3, ap_block_pp0_stage1_01001, p_1_fu_295_p3, ap_predicate_op59_write_state3, ap_block_pp0_stage2_01001, p_2_fu_303_p3, ap_predicate_op62_write_state4, ap_block_pp0_stage3_01001, p_3_fu_311_p3, ap_predicate_op65_write_state5, ap_block_pp0_stage4_01001, p_4_fu_319_p3, ap_block_pp0_stage5_01001, p_0_fu_327_p3, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (or_ln1323_5_reg_366 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_din <= p_0_fu_327_p3;
        elsif (((ap_predicate_op68_write_state6 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            img_din <= p_4_fu_319_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_01001) and (ap_predicate_op65_write_state5 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            img_din <= p_3_fu_311_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_op62_write_state4 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            img_din <= p_2_fu_303_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_op59_write_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            img_din <= p_1_fu_295_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_predicate_op51_write_state2 = ap_const_boolean_1))) then 
            img_din <= p_s_fu_236_p3;
        else 
            img_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    img_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, or_ln1323_5_reg_366, ap_CS_fsm_pp0_stage5, ap_predicate_op68_write_state6, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0_11001, ap_predicate_op51_write_state2, ap_block_pp0_stage1_11001, ap_predicate_op59_write_state3, ap_predicate_op62_write_state4, ap_predicate_op65_write_state5, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_predicate_op68_write_state6 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_predicate_op65_write_state5 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_op62_write_state4 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_op59_write_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_predicate_op51_write_state2 = ap_const_boolean_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln1323_5_reg_366 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            img_write <= ap_const_logic_1;
        else 
            img_write <= ap_const_logic_0;
        end if; 
    end process;

    or_ln1323_1_fu_197_p2 <= (cmp226_1 or cmp223_fu_185_p2);
    or_ln1323_2_fu_203_p2 <= (cmp226_2 or cmp223_fu_185_p2);
    or_ln1323_3_fu_209_p2 <= (cmp226_3 or cmp223_fu_185_p2);
    or_ln1323_4_fu_215_p2 <= (cmp226_4 or cmp223_fu_185_p2);
    or_ln1323_5_fu_221_p2 <= (icmp_ln1292 or cmp223_fu_185_p2);
    or_ln1323_fu_191_p2 <= (cmp226 or cmp223_fu_185_p2);
    p_0_fu_327_p3 <= (ap_const_lv20_80200 & tmp_s_reg_390);
    p_1_fu_295_p3 <= (ap_const_lv20_80200 & tmp_6_reg_370);
    p_2_fu_303_p3 <= (ap_const_lv20_80200 & tmp_3_reg_375);
    p_3_fu_311_p3 <= (ap_const_lv20_80200 & tmp_5_reg_380);
    p_4_fu_319_p3 <= (ap_const_lv20_80200 & tmp_8_reg_385);
    p_s_fu_236_p3 <= (ap_const_lv20_80200 & trunc_ln674_fu_232_p1);
        sub222_cast17_cast_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub222_cast17),14));

    trunc_ln674_fu_232_p1 <= bytePlanes1_dout(10 - 1 downto 0);
    x_2_fu_175_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_x_1) + unsigned(ap_const_lv13_1));
    zext_ln1302_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_x_1),14));
end behav;
