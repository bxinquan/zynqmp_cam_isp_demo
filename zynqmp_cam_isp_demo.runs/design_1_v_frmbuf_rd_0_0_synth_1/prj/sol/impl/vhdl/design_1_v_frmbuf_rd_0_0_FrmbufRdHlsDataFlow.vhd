-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity design_1_v_frmbuf_rd_0_0_FrmbufRdHlsDataFlow is
port (
    m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mm_video_AWVALID : OUT STD_LOGIC;
    m_axi_mm_video_AWREADY : IN STD_LOGIC;
    m_axi_mm_video_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mm_video_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mm_video_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mm_video_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mm_video_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mm_video_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mm_video_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mm_video_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mm_video_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mm_video_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mm_video_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mm_video_WVALID : OUT STD_LOGIC;
    m_axi_mm_video_WREADY : IN STD_LOGIC;
    m_axi_mm_video_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mm_video_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mm_video_WLAST : OUT STD_LOGIC;
    m_axi_mm_video_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mm_video_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mm_video_ARVALID : OUT STD_LOGIC;
    m_axi_mm_video_ARREADY : IN STD_LOGIC;
    m_axi_mm_video_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mm_video_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mm_video_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mm_video_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mm_video_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mm_video_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mm_video_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mm_video_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mm_video_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mm_video_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mm_video_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mm_video_RVALID : IN STD_LOGIC;
    m_axi_mm_video_RREADY : OUT STD_LOGIC;
    m_axi_mm_video_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mm_video_RLAST : IN STD_LOGIC;
    m_axi_mm_video_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mm_video_RFIFONUM : IN STD_LOGIC_VECTOR (6 downto 0);
    m_axi_mm_video_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mm_video_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mm_video_BVALID : IN STD_LOGIC;
    m_axi_mm_video_BREADY : OUT STD_LOGIC;
    m_axi_mm_video_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mm_video_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mm_video_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    HwReg_frm_buffer : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read : IN STD_LOGIC_VECTOR (11 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (11 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (14 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_read_ap_vld : IN STD_LOGIC;
    p_read3_ap_vld : IN STD_LOGIC;
    p_read5_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    HwReg_frm_buffer_ap_vld : IN STD_LOGIC;
    p_read1_ap_vld : IN STD_LOGIC;
    p_read4_ap_vld : IN STD_LOGIC;
    p_read2_ap_vld : IN STD_LOGIC;
    m_axis_video_TVALID : OUT STD_LOGIC;
    m_axis_video_TREADY : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of design_1_v_frmbuf_rd_0_0_FrmbufRdHlsDataFlow is 
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_start_full_n : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_start_out : STD_LOGIC;
    signal entry_proc_U0_start_write : STD_LOGIC;
    signal entry_proc_U0_width_c9_din : STD_LOGIC_VECTOR (11 downto 0);
    signal entry_proc_U0_width_c9_write : STD_LOGIC;
    signal entry_proc_U0_video_format_c_din : STD_LOGIC_VECTOR (5 downto 0);
    signal entry_proc_U0_video_format_c_write : STD_LOGIC;
    signal entry_proc_U0_colorFormat_c_din : STD_LOGIC_VECTOR (1 downto 0);
    signal entry_proc_U0_colorFormat_c_write : STD_LOGIC;
    signal AXIMMvideo2Bytes_U0_ap_start : STD_LOGIC;
    signal AXIMMvideo2Bytes_U0_ap_done : STD_LOGIC;
    signal AXIMMvideo2Bytes_U0_ap_continue : STD_LOGIC;
    signal AXIMMvideo2Bytes_U0_ap_idle : STD_LOGIC;
    signal AXIMMvideo2Bytes_U0_ap_ready : STD_LOGIC;
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_AWVALID : STD_LOGIC;
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_WVALID : STD_LOGIC;
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_WLAST : STD_LOGIC;
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_ARVALID : STD_LOGIC;
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_RREADY : STD_LOGIC;
    signal AXIMMvideo2Bytes_U0_m_axi_mm_video_BREADY : STD_LOGIC;
    signal AXIMMvideo2Bytes_U0_bytePlanes1_din : STD_LOGIC_VECTOR (63 downto 0);
    signal AXIMMvideo2Bytes_U0_bytePlanes1_write : STD_LOGIC;
    signal AXIMMvideo2Bytes_U0_height_c10_din : STD_LOGIC_VECTOR (11 downto 0);
    signal AXIMMvideo2Bytes_U0_height_c10_write : STD_LOGIC;
    signal AXIMMvideo2Bytes_U0_WidthInBytes_c_din : STD_LOGIC_VECTOR (14 downto 0);
    signal AXIMMvideo2Bytes_U0_WidthInBytes_c_write : STD_LOGIC;
    signal Bytes2MultiPixStream_U0_ap_start : STD_LOGIC;
    signal Bytes2MultiPixStream_U0_ap_done : STD_LOGIC;
    signal Bytes2MultiPixStream_U0_ap_continue : STD_LOGIC;
    signal Bytes2MultiPixStream_U0_ap_idle : STD_LOGIC;
    signal Bytes2MultiPixStream_U0_ap_ready : STD_LOGIC;
    signal Bytes2MultiPixStream_U0_bytePlanes1_read : STD_LOGIC;
    signal Bytes2MultiPixStream_U0_img_din : STD_LOGIC_VECTOR (29 downto 0);
    signal Bytes2MultiPixStream_U0_img_write : STD_LOGIC;
    signal Bytes2MultiPixStream_U0_Height_read : STD_LOGIC;
    signal Bytes2MultiPixStream_U0_Width_read : STD_LOGIC;
    signal Bytes2MultiPixStream_U0_WidthInBytes_read : STD_LOGIC;
    signal Bytes2MultiPixStream_U0_VideoFormat_read : STD_LOGIC;
    signal Bytes2MultiPixStream_U0_width_c_din : STD_LOGIC_VECTOR (11 downto 0);
    signal Bytes2MultiPixStream_U0_width_c_write : STD_LOGIC;
    signal Bytes2MultiPixStream_U0_height_c_din : STD_LOGIC_VECTOR (11 downto 0);
    signal Bytes2MultiPixStream_U0_height_c_write : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ap_start : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ap_done : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_img_read : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TVALID : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal MultiPixStream2AXIvideo_U0_Height_read : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_WidthOut_read : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_colorFormat_read : STD_LOGIC;
    signal width_c9_full_n : STD_LOGIC;
    signal width_c9_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal width_c9_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal width_c9_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal width_c9_empty_n : STD_LOGIC;
    signal video_format_c_full_n : STD_LOGIC;
    signal video_format_c_dout : STD_LOGIC_VECTOR (5 downto 0);
    signal video_format_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal video_format_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal video_format_c_empty_n : STD_LOGIC;
    signal colorFormat_c_full_n : STD_LOGIC;
    signal colorFormat_c_dout : STD_LOGIC_VECTOR (1 downto 0);
    signal colorFormat_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal colorFormat_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal colorFormat_c_empty_n : STD_LOGIC;
    signal bytePlanes_plane0_full_n : STD_LOGIC;
    signal bytePlanes_plane0_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal bytePlanes_plane0_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal bytePlanes_plane0_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal bytePlanes_plane0_empty_n : STD_LOGIC;
    signal height_c10_full_n : STD_LOGIC;
    signal height_c10_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal height_c10_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal height_c10_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal height_c10_empty_n : STD_LOGIC;
    signal WidthInBytes_c_full_n : STD_LOGIC;
    signal WidthInBytes_c_dout : STD_LOGIC_VECTOR (14 downto 0);
    signal WidthInBytes_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal WidthInBytes_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal WidthInBytes_c_empty_n : STD_LOGIC;
    signal img_full_n : STD_LOGIC;
    signal img_dout : STD_LOGIC_VECTOR (29 downto 0);
    signal img_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal img_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal img_empty_n : STD_LOGIC;
    signal width_c_full_n : STD_LOGIC;
    signal width_c_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal width_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal width_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal width_c_empty_n : STD_LOGIC;
    signal height_c_full_n : STD_LOGIC;
    signal height_c_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal height_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal height_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal height_c_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_AXIMMvideo2Bytes_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_AXIMMvideo2Bytes_U0_ap_ready : STD_LOGIC;
    signal start_for_Bytes2MultiPixStream_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Bytes2MultiPixStream_U0_full_n : STD_LOGIC;
    signal start_for_Bytes2MultiPixStream_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Bytes2MultiPixStream_U0_empty_n : STD_LOGIC;
    signal start_for_MultiPixStream2AXIvideo_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_MultiPixStream2AXIvideo_U0_full_n : STD_LOGIC;
    signal start_for_MultiPixStream2AXIvideo_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_MultiPixStream2AXIvideo_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component design_1_v_frmbuf_rd_0_0_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (11 downto 0);
        width_c9_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        width_c9_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        width_c9_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        width_c9_full_n : IN STD_LOGIC;
        width_c9_write : OUT STD_LOGIC;
        p_read1 : IN STD_LOGIC_VECTOR (5 downto 0);
        video_format_c_din : OUT STD_LOGIC_VECTOR (5 downto 0);
        video_format_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        video_format_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        video_format_c_full_n : IN STD_LOGIC;
        video_format_c_write : OUT STD_LOGIC;
        p_read2 : IN STD_LOGIC_VECTOR (1 downto 0);
        colorFormat_c_din : OUT STD_LOGIC_VECTOR (1 downto 0);
        colorFormat_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        colorFormat_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        colorFormat_c_full_n : IN STD_LOGIC;
        colorFormat_c_write : OUT STD_LOGIC );
    end component;


    component design_1_v_frmbuf_rd_0_0_AXIMMvideo2Bytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_mm_video_AWVALID : OUT STD_LOGIC;
        m_axi_mm_video_AWREADY : IN STD_LOGIC;
        m_axi_mm_video_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mm_video_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mm_video_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mm_video_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mm_video_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mm_video_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mm_video_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mm_video_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mm_video_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mm_video_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mm_video_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mm_video_WVALID : OUT STD_LOGIC;
        m_axi_mm_video_WREADY : IN STD_LOGIC;
        m_axi_mm_video_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_mm_video_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_mm_video_WLAST : OUT STD_LOGIC;
        m_axi_mm_video_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mm_video_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mm_video_ARVALID : OUT STD_LOGIC;
        m_axi_mm_video_ARREADY : IN STD_LOGIC;
        m_axi_mm_video_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mm_video_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mm_video_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mm_video_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mm_video_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mm_video_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mm_video_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mm_video_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mm_video_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mm_video_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mm_video_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mm_video_RVALID : IN STD_LOGIC;
        m_axi_mm_video_RREADY : OUT STD_LOGIC;
        m_axi_mm_video_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_mm_video_RLAST : IN STD_LOGIC;
        m_axi_mm_video_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mm_video_RFIFONUM : IN STD_LOGIC_VECTOR (6 downto 0);
        m_axi_mm_video_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mm_video_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mm_video_BVALID : IN STD_LOGIC;
        m_axi_mm_video_BREADY : OUT STD_LOGIC;
        m_axi_mm_video_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mm_video_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mm_video_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        srcImg : IN STD_LOGIC_VECTOR (31 downto 0);
        bytePlanes1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        bytePlanes1_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        bytePlanes1_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        bytePlanes1_full_n : IN STD_LOGIC;
        bytePlanes1_write : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (11 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (14 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
        height_c10_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        height_c10_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        height_c10_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        height_c10_full_n : IN STD_LOGIC;
        height_c10_write : OUT STD_LOGIC;
        WidthInBytes_c_din : OUT STD_LOGIC_VECTOR (14 downto 0);
        WidthInBytes_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        WidthInBytes_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        WidthInBytes_c_full_n : IN STD_LOGIC;
        WidthInBytes_c_write : OUT STD_LOGIC );
    end component;


    component design_1_v_frmbuf_rd_0_0_Bytes2MultiPixStream IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        bytePlanes1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        bytePlanes1_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        bytePlanes1_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        bytePlanes1_empty_n : IN STD_LOGIC;
        bytePlanes1_read : OUT STD_LOGIC;
        img_din : OUT STD_LOGIC_VECTOR (29 downto 0);
        img_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_full_n : IN STD_LOGIC;
        img_write : OUT STD_LOGIC;
        Height_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        Height_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        Height_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        Height_empty_n : IN STD_LOGIC;
        Height_read : OUT STD_LOGIC;
        Width_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        Width_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        Width_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        Width_empty_n : IN STD_LOGIC;
        Width_read : OUT STD_LOGIC;
        WidthInBytes_dout : IN STD_LOGIC_VECTOR (14 downto 0);
        WidthInBytes_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        WidthInBytes_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        WidthInBytes_empty_n : IN STD_LOGIC;
        WidthInBytes_read : OUT STD_LOGIC;
        VideoFormat_dout : IN STD_LOGIC_VECTOR (5 downto 0);
        VideoFormat_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        VideoFormat_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        VideoFormat_empty_n : IN STD_LOGIC;
        VideoFormat_read : OUT STD_LOGIC;
        width_c_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        width_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        width_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        width_c_full_n : IN STD_LOGIC;
        width_c_write : OUT STD_LOGIC;
        height_c_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        height_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        height_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        height_c_full_n : IN STD_LOGIC;
        height_c_write : OUT STD_LOGIC );
    end component;


    component design_1_v_frmbuf_rd_0_0_MultiPixStream2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_dout : IN STD_LOGIC_VECTOR (29 downto 0);
        img_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_empty_n : IN STD_LOGIC;
        img_read : OUT STD_LOGIC;
        m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axis_video_TVALID : OUT STD_LOGIC;
        m_axis_video_TREADY : IN STD_LOGIC;
        m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
        Height_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        Height_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        Height_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        Height_empty_n : IN STD_LOGIC;
        Height_read : OUT STD_LOGIC;
        WidthOut_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        WidthOut_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        WidthOut_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        WidthOut_empty_n : IN STD_LOGIC;
        WidthOut_read : OUT STD_LOGIC;
        colorFormat_dout : IN STD_LOGIC_VECTOR (1 downto 0);
        colorFormat_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        colorFormat_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        colorFormat_empty_n : IN STD_LOGIC;
        colorFormat_read : OUT STD_LOGIC );
    end component;


    component design_1_v_frmbuf_rd_0_0_fifo_w12_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component design_1_v_frmbuf_rd_0_0_fifo_w6_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (5 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component design_1_v_frmbuf_rd_0_0_fifo_w2_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (1 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component design_1_v_frmbuf_rd_0_0_fifo_w64_d960_B IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (10 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (10 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component design_1_v_frmbuf_rd_0_0_fifo_w12_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component design_1_v_frmbuf_rd_0_0_fifo_w15_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (14 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (14 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component design_1_v_frmbuf_rd_0_0_fifo_w30_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (29 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (29 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component design_1_v_frmbuf_rd_0_0_start_for_Bytes2MultiPixStream_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component design_1_v_frmbuf_rd_0_0_start_for_MultiPixStream2AXIvideo_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    entry_proc_U0 : component design_1_v_frmbuf_rd_0_0_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => entry_proc_U0_ap_start,
        start_full_n => entry_proc_U0_start_full_n,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        start_out => entry_proc_U0_start_out,
        start_write => entry_proc_U0_start_write,
        p_read => p_read,
        width_c9_din => entry_proc_U0_width_c9_din,
        width_c9_num_data_valid => width_c9_num_data_valid,
        width_c9_fifo_cap => width_c9_fifo_cap,
        width_c9_full_n => width_c9_full_n,
        width_c9_write => entry_proc_U0_width_c9_write,
        p_read1 => p_read3,
        video_format_c_din => entry_proc_U0_video_format_c_din,
        video_format_c_num_data_valid => video_format_c_num_data_valid,
        video_format_c_fifo_cap => video_format_c_fifo_cap,
        video_format_c_full_n => video_format_c_full_n,
        video_format_c_write => entry_proc_U0_video_format_c_write,
        p_read2 => p_read5,
        colorFormat_c_din => entry_proc_U0_colorFormat_c_din,
        colorFormat_c_num_data_valid => colorFormat_c_num_data_valid,
        colorFormat_c_fifo_cap => colorFormat_c_fifo_cap,
        colorFormat_c_full_n => colorFormat_c_full_n,
        colorFormat_c_write => entry_proc_U0_colorFormat_c_write);

    AXIMMvideo2Bytes_U0 : component design_1_v_frmbuf_rd_0_0_AXIMMvideo2Bytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => AXIMMvideo2Bytes_U0_ap_start,
        ap_done => AXIMMvideo2Bytes_U0_ap_done,
        ap_continue => AXIMMvideo2Bytes_U0_ap_continue,
        ap_idle => AXIMMvideo2Bytes_U0_ap_idle,
        ap_ready => AXIMMvideo2Bytes_U0_ap_ready,
        m_axi_mm_video_AWVALID => AXIMMvideo2Bytes_U0_m_axi_mm_video_AWVALID,
        m_axi_mm_video_AWREADY => ap_const_logic_0,
        m_axi_mm_video_AWADDR => AXIMMvideo2Bytes_U0_m_axi_mm_video_AWADDR,
        m_axi_mm_video_AWID => AXIMMvideo2Bytes_U0_m_axi_mm_video_AWID,
        m_axi_mm_video_AWLEN => AXIMMvideo2Bytes_U0_m_axi_mm_video_AWLEN,
        m_axi_mm_video_AWSIZE => AXIMMvideo2Bytes_U0_m_axi_mm_video_AWSIZE,
        m_axi_mm_video_AWBURST => AXIMMvideo2Bytes_U0_m_axi_mm_video_AWBURST,
        m_axi_mm_video_AWLOCK => AXIMMvideo2Bytes_U0_m_axi_mm_video_AWLOCK,
        m_axi_mm_video_AWCACHE => AXIMMvideo2Bytes_U0_m_axi_mm_video_AWCACHE,
        m_axi_mm_video_AWPROT => AXIMMvideo2Bytes_U0_m_axi_mm_video_AWPROT,
        m_axi_mm_video_AWQOS => AXIMMvideo2Bytes_U0_m_axi_mm_video_AWQOS,
        m_axi_mm_video_AWREGION => AXIMMvideo2Bytes_U0_m_axi_mm_video_AWREGION,
        m_axi_mm_video_AWUSER => AXIMMvideo2Bytes_U0_m_axi_mm_video_AWUSER,
        m_axi_mm_video_WVALID => AXIMMvideo2Bytes_U0_m_axi_mm_video_WVALID,
        m_axi_mm_video_WREADY => ap_const_logic_0,
        m_axi_mm_video_WDATA => AXIMMvideo2Bytes_U0_m_axi_mm_video_WDATA,
        m_axi_mm_video_WSTRB => AXIMMvideo2Bytes_U0_m_axi_mm_video_WSTRB,
        m_axi_mm_video_WLAST => AXIMMvideo2Bytes_U0_m_axi_mm_video_WLAST,
        m_axi_mm_video_WID => AXIMMvideo2Bytes_U0_m_axi_mm_video_WID,
        m_axi_mm_video_WUSER => AXIMMvideo2Bytes_U0_m_axi_mm_video_WUSER,
        m_axi_mm_video_ARVALID => AXIMMvideo2Bytes_U0_m_axi_mm_video_ARVALID,
        m_axi_mm_video_ARREADY => m_axi_mm_video_ARREADY,
        m_axi_mm_video_ARADDR => AXIMMvideo2Bytes_U0_m_axi_mm_video_ARADDR,
        m_axi_mm_video_ARID => AXIMMvideo2Bytes_U0_m_axi_mm_video_ARID,
        m_axi_mm_video_ARLEN => AXIMMvideo2Bytes_U0_m_axi_mm_video_ARLEN,
        m_axi_mm_video_ARSIZE => AXIMMvideo2Bytes_U0_m_axi_mm_video_ARSIZE,
        m_axi_mm_video_ARBURST => AXIMMvideo2Bytes_U0_m_axi_mm_video_ARBURST,
        m_axi_mm_video_ARLOCK => AXIMMvideo2Bytes_U0_m_axi_mm_video_ARLOCK,
        m_axi_mm_video_ARCACHE => AXIMMvideo2Bytes_U0_m_axi_mm_video_ARCACHE,
        m_axi_mm_video_ARPROT => AXIMMvideo2Bytes_U0_m_axi_mm_video_ARPROT,
        m_axi_mm_video_ARQOS => AXIMMvideo2Bytes_U0_m_axi_mm_video_ARQOS,
        m_axi_mm_video_ARREGION => AXIMMvideo2Bytes_U0_m_axi_mm_video_ARREGION,
        m_axi_mm_video_ARUSER => AXIMMvideo2Bytes_U0_m_axi_mm_video_ARUSER,
        m_axi_mm_video_RVALID => m_axi_mm_video_RVALID,
        m_axi_mm_video_RREADY => AXIMMvideo2Bytes_U0_m_axi_mm_video_RREADY,
        m_axi_mm_video_RDATA => m_axi_mm_video_RDATA,
        m_axi_mm_video_RLAST => m_axi_mm_video_RLAST,
        m_axi_mm_video_RID => m_axi_mm_video_RID,
        m_axi_mm_video_RFIFONUM => m_axi_mm_video_RFIFONUM,
        m_axi_mm_video_RUSER => m_axi_mm_video_RUSER,
        m_axi_mm_video_RRESP => m_axi_mm_video_RRESP,
        m_axi_mm_video_BVALID => ap_const_logic_0,
        m_axi_mm_video_BREADY => AXIMMvideo2Bytes_U0_m_axi_mm_video_BREADY,
        m_axi_mm_video_BRESP => ap_const_lv2_0,
        m_axi_mm_video_BID => ap_const_lv1_0,
        m_axi_mm_video_BUSER => ap_const_lv1_0,
        srcImg => HwReg_frm_buffer,
        bytePlanes1_din => AXIMMvideo2Bytes_U0_bytePlanes1_din,
        bytePlanes1_num_data_valid => bytePlanes_plane0_num_data_valid,
        bytePlanes1_fifo_cap => bytePlanes_plane0_fifo_cap,
        bytePlanes1_full_n => bytePlanes_plane0_full_n,
        bytePlanes1_write => AXIMMvideo2Bytes_U0_bytePlanes1_write,
        p_read => p_read1,
        p_read1 => p_read4,
        p_read2 => p_read2,
        height_c10_din => AXIMMvideo2Bytes_U0_height_c10_din,
        height_c10_num_data_valid => height_c10_num_data_valid,
        height_c10_fifo_cap => height_c10_fifo_cap,
        height_c10_full_n => height_c10_full_n,
        height_c10_write => AXIMMvideo2Bytes_U0_height_c10_write,
        WidthInBytes_c_din => AXIMMvideo2Bytes_U0_WidthInBytes_c_din,
        WidthInBytes_c_num_data_valid => WidthInBytes_c_num_data_valid,
        WidthInBytes_c_fifo_cap => WidthInBytes_c_fifo_cap,
        WidthInBytes_c_full_n => WidthInBytes_c_full_n,
        WidthInBytes_c_write => AXIMMvideo2Bytes_U0_WidthInBytes_c_write);

    Bytes2MultiPixStream_U0 : component design_1_v_frmbuf_rd_0_0_Bytes2MultiPixStream
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Bytes2MultiPixStream_U0_ap_start,
        ap_done => Bytes2MultiPixStream_U0_ap_done,
        ap_continue => Bytes2MultiPixStream_U0_ap_continue,
        ap_idle => Bytes2MultiPixStream_U0_ap_idle,
        ap_ready => Bytes2MultiPixStream_U0_ap_ready,
        bytePlanes1_dout => bytePlanes_plane0_dout,
        bytePlanes1_num_data_valid => bytePlanes_plane0_num_data_valid,
        bytePlanes1_fifo_cap => bytePlanes_plane0_fifo_cap,
        bytePlanes1_empty_n => bytePlanes_plane0_empty_n,
        bytePlanes1_read => Bytes2MultiPixStream_U0_bytePlanes1_read,
        img_din => Bytes2MultiPixStream_U0_img_din,
        img_num_data_valid => img_num_data_valid,
        img_fifo_cap => img_fifo_cap,
        img_full_n => img_full_n,
        img_write => Bytes2MultiPixStream_U0_img_write,
        Height_dout => height_c10_dout,
        Height_num_data_valid => height_c10_num_data_valid,
        Height_fifo_cap => height_c10_fifo_cap,
        Height_empty_n => height_c10_empty_n,
        Height_read => Bytes2MultiPixStream_U0_Height_read,
        Width_dout => width_c9_dout,
        Width_num_data_valid => width_c9_num_data_valid,
        Width_fifo_cap => width_c9_fifo_cap,
        Width_empty_n => width_c9_empty_n,
        Width_read => Bytes2MultiPixStream_U0_Width_read,
        WidthInBytes_dout => WidthInBytes_c_dout,
        WidthInBytes_num_data_valid => WidthInBytes_c_num_data_valid,
        WidthInBytes_fifo_cap => WidthInBytes_c_fifo_cap,
        WidthInBytes_empty_n => WidthInBytes_c_empty_n,
        WidthInBytes_read => Bytes2MultiPixStream_U0_WidthInBytes_read,
        VideoFormat_dout => video_format_c_dout,
        VideoFormat_num_data_valid => video_format_c_num_data_valid,
        VideoFormat_fifo_cap => video_format_c_fifo_cap,
        VideoFormat_empty_n => video_format_c_empty_n,
        VideoFormat_read => Bytes2MultiPixStream_U0_VideoFormat_read,
        width_c_din => Bytes2MultiPixStream_U0_width_c_din,
        width_c_num_data_valid => width_c_num_data_valid,
        width_c_fifo_cap => width_c_fifo_cap,
        width_c_full_n => width_c_full_n,
        width_c_write => Bytes2MultiPixStream_U0_width_c_write,
        height_c_din => Bytes2MultiPixStream_U0_height_c_din,
        height_c_num_data_valid => height_c_num_data_valid,
        height_c_fifo_cap => height_c_fifo_cap,
        height_c_full_n => height_c_full_n,
        height_c_write => Bytes2MultiPixStream_U0_height_c_write);

    MultiPixStream2AXIvideo_U0 : component design_1_v_frmbuf_rd_0_0_MultiPixStream2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => MultiPixStream2AXIvideo_U0_ap_start,
        ap_done => MultiPixStream2AXIvideo_U0_ap_done,
        ap_continue => MultiPixStream2AXIvideo_U0_ap_continue,
        ap_idle => MultiPixStream2AXIvideo_U0_ap_idle,
        ap_ready => MultiPixStream2AXIvideo_U0_ap_ready,
        img_dout => img_dout,
        img_num_data_valid => img_num_data_valid,
        img_fifo_cap => img_fifo_cap,
        img_empty_n => img_empty_n,
        img_read => MultiPixStream2AXIvideo_U0_img_read,
        m_axis_video_TDATA => MultiPixStream2AXIvideo_U0_m_axis_video_TDATA,
        m_axis_video_TVALID => MultiPixStream2AXIvideo_U0_m_axis_video_TVALID,
        m_axis_video_TREADY => m_axis_video_TREADY,
        m_axis_video_TKEEP => MultiPixStream2AXIvideo_U0_m_axis_video_TKEEP,
        m_axis_video_TSTRB => MultiPixStream2AXIvideo_U0_m_axis_video_TSTRB,
        m_axis_video_TUSER => MultiPixStream2AXIvideo_U0_m_axis_video_TUSER,
        m_axis_video_TLAST => MultiPixStream2AXIvideo_U0_m_axis_video_TLAST,
        m_axis_video_TID => MultiPixStream2AXIvideo_U0_m_axis_video_TID,
        m_axis_video_TDEST => MultiPixStream2AXIvideo_U0_m_axis_video_TDEST,
        Height_dout => height_c_dout,
        Height_num_data_valid => height_c_num_data_valid,
        Height_fifo_cap => height_c_fifo_cap,
        Height_empty_n => height_c_empty_n,
        Height_read => MultiPixStream2AXIvideo_U0_Height_read,
        WidthOut_dout => width_c_dout,
        WidthOut_num_data_valid => width_c_num_data_valid,
        WidthOut_fifo_cap => width_c_fifo_cap,
        WidthOut_empty_n => width_c_empty_n,
        WidthOut_read => MultiPixStream2AXIvideo_U0_WidthOut_read,
        colorFormat_dout => colorFormat_c_dout,
        colorFormat_num_data_valid => colorFormat_c_num_data_valid,
        colorFormat_fifo_cap => colorFormat_c_fifo_cap,
        colorFormat_empty_n => colorFormat_c_empty_n,
        colorFormat_read => MultiPixStream2AXIvideo_U0_colorFormat_read);

    width_c9_U : component design_1_v_frmbuf_rd_0_0_fifo_w12_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_width_c9_din,
        if_full_n => width_c9_full_n,
        if_write => entry_proc_U0_width_c9_write,
        if_dout => width_c9_dout,
        if_num_data_valid => width_c9_num_data_valid,
        if_fifo_cap => width_c9_fifo_cap,
        if_empty_n => width_c9_empty_n,
        if_read => Bytes2MultiPixStream_U0_Width_read);

    video_format_c_U : component design_1_v_frmbuf_rd_0_0_fifo_w6_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_video_format_c_din,
        if_full_n => video_format_c_full_n,
        if_write => entry_proc_U0_video_format_c_write,
        if_dout => video_format_c_dout,
        if_num_data_valid => video_format_c_num_data_valid,
        if_fifo_cap => video_format_c_fifo_cap,
        if_empty_n => video_format_c_empty_n,
        if_read => Bytes2MultiPixStream_U0_VideoFormat_read);

    colorFormat_c_U : component design_1_v_frmbuf_rd_0_0_fifo_w2_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_colorFormat_c_din,
        if_full_n => colorFormat_c_full_n,
        if_write => entry_proc_U0_colorFormat_c_write,
        if_dout => colorFormat_c_dout,
        if_num_data_valid => colorFormat_c_num_data_valid,
        if_fifo_cap => colorFormat_c_fifo_cap,
        if_empty_n => colorFormat_c_empty_n,
        if_read => MultiPixStream2AXIvideo_U0_colorFormat_read);

    bytePlanes_plane0_U : component design_1_v_frmbuf_rd_0_0_fifo_w64_d960_B
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIMMvideo2Bytes_U0_bytePlanes1_din,
        if_full_n => bytePlanes_plane0_full_n,
        if_write => AXIMMvideo2Bytes_U0_bytePlanes1_write,
        if_dout => bytePlanes_plane0_dout,
        if_num_data_valid => bytePlanes_plane0_num_data_valid,
        if_fifo_cap => bytePlanes_plane0_fifo_cap,
        if_empty_n => bytePlanes_plane0_empty_n,
        if_read => Bytes2MultiPixStream_U0_bytePlanes1_read);

    height_c10_U : component design_1_v_frmbuf_rd_0_0_fifo_w12_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIMMvideo2Bytes_U0_height_c10_din,
        if_full_n => height_c10_full_n,
        if_write => AXIMMvideo2Bytes_U0_height_c10_write,
        if_dout => height_c10_dout,
        if_num_data_valid => height_c10_num_data_valid,
        if_fifo_cap => height_c10_fifo_cap,
        if_empty_n => height_c10_empty_n,
        if_read => Bytes2MultiPixStream_U0_Height_read);

    WidthInBytes_c_U : component design_1_v_frmbuf_rd_0_0_fifo_w15_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIMMvideo2Bytes_U0_WidthInBytes_c_din,
        if_full_n => WidthInBytes_c_full_n,
        if_write => AXIMMvideo2Bytes_U0_WidthInBytes_c_write,
        if_dout => WidthInBytes_c_dout,
        if_num_data_valid => WidthInBytes_c_num_data_valid,
        if_fifo_cap => WidthInBytes_c_fifo_cap,
        if_empty_n => WidthInBytes_c_empty_n,
        if_read => Bytes2MultiPixStream_U0_WidthInBytes_read);

    img_U : component design_1_v_frmbuf_rd_0_0_fifo_w30_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Bytes2MultiPixStream_U0_img_din,
        if_full_n => img_full_n,
        if_write => Bytes2MultiPixStream_U0_img_write,
        if_dout => img_dout,
        if_num_data_valid => img_num_data_valid,
        if_fifo_cap => img_fifo_cap,
        if_empty_n => img_empty_n,
        if_read => MultiPixStream2AXIvideo_U0_img_read);

    width_c_U : component design_1_v_frmbuf_rd_0_0_fifo_w12_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Bytes2MultiPixStream_U0_width_c_din,
        if_full_n => width_c_full_n,
        if_write => Bytes2MultiPixStream_U0_width_c_write,
        if_dout => width_c_dout,
        if_num_data_valid => width_c_num_data_valid,
        if_fifo_cap => width_c_fifo_cap,
        if_empty_n => width_c_empty_n,
        if_read => MultiPixStream2AXIvideo_U0_WidthOut_read);

    height_c_U : component design_1_v_frmbuf_rd_0_0_fifo_w12_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Bytes2MultiPixStream_U0_height_c_din,
        if_full_n => height_c_full_n,
        if_write => Bytes2MultiPixStream_U0_height_c_write,
        if_dout => height_c_dout,
        if_num_data_valid => height_c_num_data_valid,
        if_fifo_cap => height_c_fifo_cap,
        if_empty_n => height_c_empty_n,
        if_read => MultiPixStream2AXIvideo_U0_Height_read);

    start_for_Bytes2MultiPixStream_U0_U : component design_1_v_frmbuf_rd_0_0_start_for_Bytes2MultiPixStream_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Bytes2MultiPixStream_U0_din,
        if_full_n => start_for_Bytes2MultiPixStream_U0_full_n,
        if_write => entry_proc_U0_start_write,
        if_dout => start_for_Bytes2MultiPixStream_U0_dout,
        if_empty_n => start_for_Bytes2MultiPixStream_U0_empty_n,
        if_read => Bytes2MultiPixStream_U0_ap_ready);

    start_for_MultiPixStream2AXIvideo_U0_U : component design_1_v_frmbuf_rd_0_0_start_for_MultiPixStream2AXIvideo_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_MultiPixStream2AXIvideo_U0_din,
        if_full_n => start_for_MultiPixStream2AXIvideo_U0_full_n,
        if_write => entry_proc_U0_start_write,
        if_dout => start_for_MultiPixStream2AXIvideo_U0_dout,
        if_empty_n => start_for_MultiPixStream2AXIvideo_U0_empty_n,
        if_read => MultiPixStream2AXIvideo_U0_ap_ready);





    ap_sync_reg_AXIMMvideo2Bytes_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_AXIMMvideo2Bytes_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_AXIMMvideo2Bytes_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_AXIMMvideo2Bytes_U0_ap_ready <= ap_sync_AXIMMvideo2Bytes_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    AXIMMvideo2Bytes_U0_ap_continue <= ap_const_logic_1;
    AXIMMvideo2Bytes_U0_ap_start <= ((ap_sync_reg_AXIMMvideo2Bytes_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Bytes2MultiPixStream_U0_ap_continue <= ap_const_logic_1;
    Bytes2MultiPixStream_U0_ap_start <= start_for_Bytes2MultiPixStream_U0_empty_n;
    MultiPixStream2AXIvideo_U0_ap_continue <= ap_continue;
    MultiPixStream2AXIvideo_U0_ap_start <= start_for_MultiPixStream2AXIvideo_U0_empty_n;
    ap_done <= MultiPixStream2AXIvideo_U0_ap_done;
    ap_idle <= (entry_proc_U0_ap_idle and MultiPixStream2AXIvideo_U0_ap_idle and Bytes2MultiPixStream_U0_ap_idle and AXIMMvideo2Bytes_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_AXIMMvideo2Bytes_U0_ap_ready <= (ap_sync_reg_AXIMMvideo2Bytes_U0_ap_ready or AXIMMvideo2Bytes_U0_ap_ready);
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_ready <= (ap_sync_entry_proc_U0_ap_ready and ap_sync_AXIMMvideo2Bytes_U0_ap_ready);
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    entry_proc_U0_start_full_n <= (start_for_MultiPixStream2AXIvideo_U0_full_n and start_for_Bytes2MultiPixStream_U0_full_n);
    m_axi_mm_video_ARADDR <= AXIMMvideo2Bytes_U0_m_axi_mm_video_ARADDR;
    m_axi_mm_video_ARBURST <= AXIMMvideo2Bytes_U0_m_axi_mm_video_ARBURST;
    m_axi_mm_video_ARCACHE <= AXIMMvideo2Bytes_U0_m_axi_mm_video_ARCACHE;
    m_axi_mm_video_ARID <= AXIMMvideo2Bytes_U0_m_axi_mm_video_ARID;
    m_axi_mm_video_ARLEN <= AXIMMvideo2Bytes_U0_m_axi_mm_video_ARLEN;
    m_axi_mm_video_ARLOCK <= AXIMMvideo2Bytes_U0_m_axi_mm_video_ARLOCK;
    m_axi_mm_video_ARPROT <= AXIMMvideo2Bytes_U0_m_axi_mm_video_ARPROT;
    m_axi_mm_video_ARQOS <= AXIMMvideo2Bytes_U0_m_axi_mm_video_ARQOS;
    m_axi_mm_video_ARREGION <= AXIMMvideo2Bytes_U0_m_axi_mm_video_ARREGION;
    m_axi_mm_video_ARSIZE <= AXIMMvideo2Bytes_U0_m_axi_mm_video_ARSIZE;
    m_axi_mm_video_ARUSER <= AXIMMvideo2Bytes_U0_m_axi_mm_video_ARUSER;
    m_axi_mm_video_ARVALID <= AXIMMvideo2Bytes_U0_m_axi_mm_video_ARVALID;
    m_axi_mm_video_AWADDR <= ap_const_lv32_0;
    m_axi_mm_video_AWBURST <= ap_const_lv2_0;
    m_axi_mm_video_AWCACHE <= ap_const_lv4_0;
    m_axi_mm_video_AWID <= ap_const_lv1_0;
    m_axi_mm_video_AWLEN <= ap_const_lv32_0;
    m_axi_mm_video_AWLOCK <= ap_const_lv2_0;
    m_axi_mm_video_AWPROT <= ap_const_lv3_0;
    m_axi_mm_video_AWQOS <= ap_const_lv4_0;
    m_axi_mm_video_AWREGION <= ap_const_lv4_0;
    m_axi_mm_video_AWSIZE <= ap_const_lv3_0;
    m_axi_mm_video_AWUSER <= ap_const_lv1_0;
    m_axi_mm_video_AWVALID <= ap_const_logic_0;
    m_axi_mm_video_BREADY <= ap_const_logic_0;
    m_axi_mm_video_RREADY <= AXIMMvideo2Bytes_U0_m_axi_mm_video_RREADY;
    m_axi_mm_video_WDATA <= ap_const_lv64_0;
    m_axi_mm_video_WID <= ap_const_lv1_0;
    m_axi_mm_video_WLAST <= ap_const_logic_0;
    m_axi_mm_video_WSTRB <= ap_const_lv8_0;
    m_axi_mm_video_WUSER <= ap_const_lv1_0;
    m_axi_mm_video_WVALID <= ap_const_logic_0;
    m_axis_video_TDATA <= MultiPixStream2AXIvideo_U0_m_axis_video_TDATA;
    m_axis_video_TDEST <= MultiPixStream2AXIvideo_U0_m_axis_video_TDEST;
    m_axis_video_TID <= MultiPixStream2AXIvideo_U0_m_axis_video_TID;
    m_axis_video_TKEEP <= MultiPixStream2AXIvideo_U0_m_axis_video_TKEEP;
    m_axis_video_TLAST <= MultiPixStream2AXIvideo_U0_m_axis_video_TLAST;
    m_axis_video_TSTRB <= MultiPixStream2AXIvideo_U0_m_axis_video_TSTRB;
    m_axis_video_TUSER <= MultiPixStream2AXIvideo_U0_m_axis_video_TUSER;
    m_axis_video_TVALID <= MultiPixStream2AXIvideo_U0_m_axis_video_TVALID;
    start_for_Bytes2MultiPixStream_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_MultiPixStream2AXIvideo_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
