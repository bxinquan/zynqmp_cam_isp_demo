// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module design_1_v_frmbuf_rd_0_0_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_298_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        img_dout,
        img_num_data_valid,
        img_fifo_cap,
        img_empty_n,
        img_read,
        m_axis_video_TREADY,
        sof,
        cols,
        sub,
        map_V_2_reload,
        map_V_1_reload,
        map_V_reload,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [29:0] img_dout;
input  [1:0] img_num_data_valid;
input  [1:0] img_fifo_cap;
input   img_empty_n;
output   img_read;
input   m_axis_video_TREADY;
input  [0:0] sof;
input  [11:0] cols;
input  [12:0] sub;
input  [4:0] map_V_2_reload;
input  [4:0] map_V_1_reload;
input  [4:0] map_V_reload;
output  [31:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
output  [3:0] m_axis_video_TKEEP;
output  [3:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;

reg ap_idle;
reg img_read;
reg m_axis_video_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln298_reg_317;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state2_io;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln298_fu_195_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    img_blk_n;
wire    ap_block_pp0_stage0;
reg    m_axis_video_TDATA_blk_n;
reg   [0:0] sof_2_reg_171;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] axi_last_V_fu_207_p2;
reg   [0:0] axi_last_V_reg_321;
wire    ap_loop_init;
reg   [11:0] j_fu_96;
wire   [11:0] j_2_fu_201_p2;
reg   [11:0] ap_sig_allocacmp_j_1;
reg    ap_block_pp0_stage0_01001;
wire   [12:0] zext_ln298_fu_191_p1;
wire   [9:0] pix_val_V_fu_218_p1;
wire   [9:0] tmp_4_fu_242_p2;
wire   [9:0] tmp_4_fu_242_p3;
wire   [9:0] tmp_5_fu_253_p2;
wire   [9:0] tmp_5_fu_253_p3;
wire   [9:0] tmp_6_fu_264_p2;
wire   [9:0] tmp_6_fu_264_p3;
wire   [9:0] tmp_6_fu_264_p5;
wire   [9:0] tmp_5_fu_253_p5;
wire   [9:0] tmp_4_fu_242_p5;
wire   [29:0] p_Result_s_fu_275_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_234;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 icmp_ln298_reg_317 = 1'd0;
#0 sof_2_reg_171 = 1'd0;
#0 axi_last_V_reg_321 = 1'd0;
#0 j_fu_96 = 12'd0;
#0 ap_done_reg = 1'b0;
#0 ap_loop_exit_ready_pp0_iter1_reg = 1'b0;
end

design_1_v_frmbuf_rd_0_0_mux_35_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 5 ),
    .dout_WIDTH( 10 ))
mux_35_10_1_1_U57(
    .din0(pix_val_V_fu_218_p1),
    .din1(tmp_4_fu_242_p2),
    .din2(tmp_4_fu_242_p3),
    .din3(map_V_2_reload),
    .dout(tmp_4_fu_242_p5)
);

design_1_v_frmbuf_rd_0_0_mux_35_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 5 ),
    .dout_WIDTH( 10 ))
mux_35_10_1_1_U58(
    .din0(pix_val_V_fu_218_p1),
    .din1(tmp_5_fu_253_p2),
    .din2(tmp_5_fu_253_p3),
    .din3(map_V_1_reload),
    .dout(tmp_5_fu_253_p5)
);

design_1_v_frmbuf_rd_0_0_mux_35_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 5 ),
    .dout_WIDTH( 10 ))
mux_35_10_1_1_U59(
    .din0(pix_val_V_fu_218_p1),
    .din1(tmp_6_fu_264_p2),
    .din2(tmp_6_fu_264_p3),
    .din3(map_V_reload),
    .dout(tmp_6_fu_264_p5)
);

design_1_v_frmbuf_rd_0_0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        axi_last_V_reg_321 <= 1'd0;
    end else begin
        if (((icmp_ln298_fu_195_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            axi_last_V_reg_321 <= axi_last_V_fu_207_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        icmp_ln298_reg_317 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            icmp_ln298_reg_317 <= icmp_ln298_fu_195_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        j_fu_96 <= 12'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            if (((icmp_ln298_fu_195_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                j_fu_96 <= j_2_fu_201_p2;
            end else if ((ap_loop_init == 1'b1)) begin
                j_fu_96 <= 12'd0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        sof_2_reg_171 <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_init == 1'b1))) begin
                sof_2_reg_171 <= sof;
            end else if ((1'b1 == ap_condition_234)) begin
                sof_2_reg_171 <= 1'd0;
            end
        end
    end
end

always @ (*) begin
    if (((icmp_ln298_fu_195_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_1 = 12'd0;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_96;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln298_reg_317 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_blk_n = img_empty_n;
    end else begin
        img_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln298_reg_317 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_read = 1'b1;
    end else begin
        img_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln298_reg_317 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_TDATA_blk_n = m_axis_video_TREADY;
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln298_reg_317 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_TVALID = 1'b1;
    end else begin
        m_axis_video_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((m_axis_video_TREADY == 1'b0) & (icmp_ln298_reg_317 == 1'd0)) | ((icmp_ln298_reg_317 == 1'd0) & (img_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((m_axis_video_TREADY == 1'b0) & (icmp_ln298_reg_317 == 1'd0)) | ((icmp_ln298_reg_317 == 1'd0) & (img_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((m_axis_video_TREADY == 1'b0) & (icmp_ln298_reg_317 == 1'd0)) | ((icmp_ln298_reg_317 == 1'd0) & (img_empty_n == 1'b0))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((m_axis_video_TREADY == 1'b0) & (icmp_ln298_reg_317 == 1'd0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((m_axis_video_TREADY == 1'b0) & (icmp_ln298_reg_317 == 1'd0)) | ((icmp_ln298_reg_317 == 1'd0) & (img_empty_n == 1'b0)));
end

always @ (*) begin
    ap_condition_234 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln298_reg_317 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign axi_last_V_fu_207_p2 = ((zext_ln298_fu_191_p1 == sub) ? 1'b1 : 1'b0);

assign icmp_ln298_fu_195_p2 = ((ap_sig_allocacmp_j_1 == cols) ? 1'b1 : 1'b0);

assign j_2_fu_201_p2 = (ap_sig_allocacmp_j_1 + 12'd1);

assign m_axis_video_TDATA = p_Result_s_fu_275_p4;

assign m_axis_video_TDEST = 1'd0;

assign m_axis_video_TID = 1'd0;

assign m_axis_video_TKEEP = 4'd15;

assign m_axis_video_TLAST = axi_last_V_reg_321;

assign m_axis_video_TSTRB = 4'd0;

assign m_axis_video_TUSER = sof_2_reg_171;

assign p_Result_s_fu_275_p4 = {{{tmp_6_fu_264_p5}, {tmp_5_fu_253_p5}}, {tmp_4_fu_242_p5}};

assign pix_val_V_fu_218_p1 = img_dout[9:0];

assign tmp_4_fu_242_p2 = {{img_dout[19:10]}};

assign tmp_4_fu_242_p3 = {{img_dout[29:20]}};

assign tmp_5_fu_253_p2 = {{img_dout[19:10]}};

assign tmp_5_fu_253_p3 = {{img_dout[29:20]}};

assign tmp_6_fu_264_p2 = {{img_dout[19:10]}};

assign tmp_6_fu_264_p3 = {{img_dout[29:20]}};

assign zext_ln298_fu_191_p1 = ap_sig_allocacmp_j_1;

endmodule //design_1_v_frmbuf_rd_0_0_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_298_3
