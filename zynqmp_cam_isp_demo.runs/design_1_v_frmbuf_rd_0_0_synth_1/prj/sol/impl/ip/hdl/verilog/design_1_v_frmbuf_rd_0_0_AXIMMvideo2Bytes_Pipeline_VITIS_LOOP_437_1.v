// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module design_1_v_frmbuf_rd_0_0_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_mm_video_AWVALID,
        m_axi_mm_video_AWREADY,
        m_axi_mm_video_AWADDR,
        m_axi_mm_video_AWID,
        m_axi_mm_video_AWLEN,
        m_axi_mm_video_AWSIZE,
        m_axi_mm_video_AWBURST,
        m_axi_mm_video_AWLOCK,
        m_axi_mm_video_AWCACHE,
        m_axi_mm_video_AWPROT,
        m_axi_mm_video_AWQOS,
        m_axi_mm_video_AWREGION,
        m_axi_mm_video_AWUSER,
        m_axi_mm_video_WVALID,
        m_axi_mm_video_WREADY,
        m_axi_mm_video_WDATA,
        m_axi_mm_video_WSTRB,
        m_axi_mm_video_WLAST,
        m_axi_mm_video_WID,
        m_axi_mm_video_WUSER,
        m_axi_mm_video_ARVALID,
        m_axi_mm_video_ARREADY,
        m_axi_mm_video_ARADDR,
        m_axi_mm_video_ARID,
        m_axi_mm_video_ARLEN,
        m_axi_mm_video_ARSIZE,
        m_axi_mm_video_ARBURST,
        m_axi_mm_video_ARLOCK,
        m_axi_mm_video_ARCACHE,
        m_axi_mm_video_ARPROT,
        m_axi_mm_video_ARQOS,
        m_axi_mm_video_ARREGION,
        m_axi_mm_video_ARUSER,
        m_axi_mm_video_RVALID,
        m_axi_mm_video_RREADY,
        m_axi_mm_video_RDATA,
        m_axi_mm_video_RLAST,
        m_axi_mm_video_RID,
        m_axi_mm_video_RFIFONUM,
        m_axi_mm_video_RUSER,
        m_axi_mm_video_RRESP,
        m_axi_mm_video_BVALID,
        m_axi_mm_video_BREADY,
        m_axi_mm_video_BRESP,
        m_axi_mm_video_BID,
        m_axi_mm_video_BUSER,
        bytePlanes1_din,
        bytePlanes1_num_data_valid,
        bytePlanes1_fifo_cap,
        bytePlanes1_full_n,
        bytePlanes1_write,
        sext_ln437,
        div
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_mm_video_AWVALID;
input   m_axi_mm_video_AWREADY;
output  [31:0] m_axi_mm_video_AWADDR;
output  [0:0] m_axi_mm_video_AWID;
output  [31:0] m_axi_mm_video_AWLEN;
output  [2:0] m_axi_mm_video_AWSIZE;
output  [1:0] m_axi_mm_video_AWBURST;
output  [1:0] m_axi_mm_video_AWLOCK;
output  [3:0] m_axi_mm_video_AWCACHE;
output  [2:0] m_axi_mm_video_AWPROT;
output  [3:0] m_axi_mm_video_AWQOS;
output  [3:0] m_axi_mm_video_AWREGION;
output  [0:0] m_axi_mm_video_AWUSER;
output   m_axi_mm_video_WVALID;
input   m_axi_mm_video_WREADY;
output  [63:0] m_axi_mm_video_WDATA;
output  [7:0] m_axi_mm_video_WSTRB;
output   m_axi_mm_video_WLAST;
output  [0:0] m_axi_mm_video_WID;
output  [0:0] m_axi_mm_video_WUSER;
output   m_axi_mm_video_ARVALID;
input   m_axi_mm_video_ARREADY;
output  [31:0] m_axi_mm_video_ARADDR;
output  [0:0] m_axi_mm_video_ARID;
output  [31:0] m_axi_mm_video_ARLEN;
output  [2:0] m_axi_mm_video_ARSIZE;
output  [1:0] m_axi_mm_video_ARBURST;
output  [1:0] m_axi_mm_video_ARLOCK;
output  [3:0] m_axi_mm_video_ARCACHE;
output  [2:0] m_axi_mm_video_ARPROT;
output  [3:0] m_axi_mm_video_ARQOS;
output  [3:0] m_axi_mm_video_ARREGION;
output  [0:0] m_axi_mm_video_ARUSER;
input   m_axi_mm_video_RVALID;
output   m_axi_mm_video_RREADY;
input  [63:0] m_axi_mm_video_RDATA;
input   m_axi_mm_video_RLAST;
input  [0:0] m_axi_mm_video_RID;
input  [6:0] m_axi_mm_video_RFIFONUM;
input  [0:0] m_axi_mm_video_RUSER;
input  [1:0] m_axi_mm_video_RRESP;
input   m_axi_mm_video_BVALID;
output   m_axi_mm_video_BREADY;
input  [1:0] m_axi_mm_video_BRESP;
input  [0:0] m_axi_mm_video_BID;
input  [0:0] m_axi_mm_video_BUSER;
output  [63:0] bytePlanes1_din;
input  [10:0] bytePlanes1_num_data_valid;
input  [10:0] bytePlanes1_fifo_cap;
input   bytePlanes1_full_n;
output   bytePlanes1_write;
input  [28:0] sext_ln437;
input  [12:0] div;

reg ap_idle;
reg m_axi_mm_video_RREADY;
reg bytePlanes1_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln437_reg_143;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln437_fu_108_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    mm_video_blk_n_R;
wire    ap_block_pp0_stage0;
reg    bytePlanes1_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [63:0] mm_video_addr_read_reg_147;
reg    ap_condition_exit_pp0_iter1_stage0;
reg   [12:0] x_fu_68;
wire   [12:0] add_ln437_fu_114_p2;
wire    ap_loop_init;
reg   [12:0] ap_sig_allocacmp_x_5;
reg    ap_block_pp0_stage0_01001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 icmp_ln437_reg_143 = 1'd0;
#0 mm_video_addr_read_reg_147 = 64'd0;
#0 x_fu_68 = 13'd0;
#0 ap_done_reg = 1'b0;
#0 ap_loop_exit_ready_pp0_iter1_reg = 1'b0;
end

design_1_v_frmbuf_rd_0_0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        icmp_ln437_reg_143 <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            icmp_ln437_reg_143 <= icmp_ln437_fu_108_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        mm_video_addr_read_reg_147 <= 64'd0;
    end else begin
        if (((icmp_ln437_reg_143 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            mm_video_addr_read_reg_147 <= m_axi_mm_video_RDATA;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_fu_68 <= 13'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln437_fu_108_p2 == 1'd0))) begin
                x_fu_68 <= add_ln437_fu_114_p2;
            end else if ((ap_loop_init == 1'b1)) begin
                x_fu_68 <= 13'd0;
            end
        end
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln437_fu_108_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln437_reg_143 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_x_5 = 13'd0;
    end else begin
        ap_sig_allocacmp_x_5 = x_fu_68;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        bytePlanes1_blk_n = bytePlanes1_full_n;
    end else begin
        bytePlanes1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bytePlanes1_write = 1'b1;
    end else begin
        bytePlanes1_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln437_reg_143 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_mm_video_RREADY = 1'b1;
    end else begin
        m_axi_mm_video_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln437_reg_143 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mm_video_blk_n_R = m_axi_mm_video_RVALID;
    end else begin
        mm_video_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln437_fu_114_p2 = (ap_sig_allocacmp_x_5 + 13'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((bytePlanes1_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln437_reg_143 == 1'd0) & (m_axi_mm_video_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((bytePlanes1_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln437_reg_143 == 1'd0) & (m_axi_mm_video_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((bytePlanes1_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln437_reg_143 == 1'd0) & (m_axi_mm_video_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln437_reg_143 == 1'd0) & (m_axi_mm_video_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (bytePlanes1_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bytePlanes1_din = mm_video_addr_read_reg_147;

assign icmp_ln437_fu_108_p2 = ((ap_sig_allocacmp_x_5 == div) ? 1'b1 : 1'b0);

assign m_axi_mm_video_ARADDR = 32'd0;

assign m_axi_mm_video_ARBURST = 2'd0;

assign m_axi_mm_video_ARCACHE = 4'd0;

assign m_axi_mm_video_ARID = 1'd0;

assign m_axi_mm_video_ARLEN = 32'd0;

assign m_axi_mm_video_ARLOCK = 2'd0;

assign m_axi_mm_video_ARPROT = 3'd0;

assign m_axi_mm_video_ARQOS = 4'd0;

assign m_axi_mm_video_ARREGION = 4'd0;

assign m_axi_mm_video_ARSIZE = 3'd0;

assign m_axi_mm_video_ARUSER = 1'd0;

assign m_axi_mm_video_ARVALID = 1'b0;

assign m_axi_mm_video_AWADDR = 32'd0;

assign m_axi_mm_video_AWBURST = 2'd0;

assign m_axi_mm_video_AWCACHE = 4'd0;

assign m_axi_mm_video_AWID = 1'd0;

assign m_axi_mm_video_AWLEN = 32'd0;

assign m_axi_mm_video_AWLOCK = 2'd0;

assign m_axi_mm_video_AWPROT = 3'd0;

assign m_axi_mm_video_AWQOS = 4'd0;

assign m_axi_mm_video_AWREGION = 4'd0;

assign m_axi_mm_video_AWSIZE = 3'd0;

assign m_axi_mm_video_AWUSER = 1'd0;

assign m_axi_mm_video_AWVALID = 1'b0;

assign m_axi_mm_video_BREADY = 1'b0;

assign m_axi_mm_video_WDATA = 64'd0;

assign m_axi_mm_video_WID = 1'd0;

assign m_axi_mm_video_WLAST = 1'b0;

assign m_axi_mm_video_WSTRB = 8'd0;

assign m_axi_mm_video_WUSER = 1'd0;

assign m_axi_mm_video_WVALID = 1'b0;

endmodule //design_1_v_frmbuf_rd_0_0_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1
