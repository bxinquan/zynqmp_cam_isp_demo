-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity design_1_v_frmbuf_wr_0_0_Bytes2AXIMMvideo is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    bytePlanes1_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    bytePlanes1_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
    bytePlanes1_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
    bytePlanes1_empty_n : IN STD_LOGIC;
    bytePlanes1_read : OUT STD_LOGIC;
    m_axi_mm_video_AWVALID : OUT STD_LOGIC;
    m_axi_mm_video_AWREADY : IN STD_LOGIC;
    m_axi_mm_video_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mm_video_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mm_video_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mm_video_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mm_video_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mm_video_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mm_video_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mm_video_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mm_video_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mm_video_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mm_video_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mm_video_WVALID : OUT STD_LOGIC;
    m_axi_mm_video_WREADY : IN STD_LOGIC;
    m_axi_mm_video_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    m_axi_mm_video_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mm_video_WLAST : OUT STD_LOGIC;
    m_axi_mm_video_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mm_video_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mm_video_ARVALID : OUT STD_LOGIC;
    m_axi_mm_video_ARREADY : IN STD_LOGIC;
    m_axi_mm_video_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mm_video_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mm_video_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mm_video_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mm_video_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mm_video_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mm_video_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mm_video_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mm_video_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mm_video_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mm_video_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mm_video_RVALID : IN STD_LOGIC;
    m_axi_mm_video_RREADY : OUT STD_LOGIC;
    m_axi_mm_video_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    m_axi_mm_video_RLAST : IN STD_LOGIC;
    m_axi_mm_video_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mm_video_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_mm_video_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mm_video_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mm_video_BVALID : IN STD_LOGIC;
    m_axi_mm_video_BREADY : OUT STD_LOGIC;
    m_axi_mm_video_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mm_video_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mm_video_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    dstImg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    dstImg_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    dstImg_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    dstImg_empty_n : IN STD_LOGIC;
    dstImg_read : OUT STD_LOGIC;
    Height_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    Height_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    Height_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    Height_empty_n : IN STD_LOGIC;
    Height_read : OUT STD_LOGIC;
    WidthInBytes_dout : IN STD_LOGIC_VECTOR (14 downto 0);
    WidthInBytes_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    WidthInBytes_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    WidthInBytes_empty_n : IN STD_LOGIC;
    WidthInBytes_read : OUT STD_LOGIC;
    StrideInBytes_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    StrideInBytes_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    StrideInBytes_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    StrideInBytes_empty_n : IN STD_LOGIC;
    StrideInBytes_read : OUT STD_LOGIC );
end;


architecture behav of design_1_v_frmbuf_wr_0_0_Bytes2AXIMMvideo is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (108 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (108 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (108 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (108 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (108 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (108 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (108 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (108 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (108 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (108 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv16_1F : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mm_video_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal mm_video_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal cmp32_reg_311 : STD_LOGIC_VECTOR (0 downto 0);
    signal dstImg_blk_n : STD_LOGIC;
    signal Height_blk_n : STD_LOGIC;
    signal WidthInBytes_blk_n : STD_LOGIC;
    signal StrideInBytes_blk_n : STD_LOGIC;
    signal Height_read_reg_291 : STD_LOGIC_VECTOR (11 downto 0);
    signal dstImg_read_reg_296 : STD_LOGIC_VECTOR (31 downto 0);
    signal loopWidth_fu_168_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal loopWidth_reg_301 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1076_1_fu_178_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1076_1_reg_306 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmp32_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1082_fu_198_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln1082_reg_315 : STD_LOGIC_VECTOR (22 downto 0);
    signal y_7_fu_220_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal y_7_reg_323 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln5_reg_328 : STD_LOGIC_VECTOR (26 downto 0);
    signal icmp_ln1082_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_ap_start : STD_LOGIC;
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_ap_done : STD_LOGIC;
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_ap_idle : STD_LOGIC;
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_ap_ready : STD_LOGIC;
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_bytePlanes1_read : STD_LOGIC;
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWVALID : STD_LOGIC;
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_WVALID : STD_LOGIC;
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_WLAST : STD_LOGIC;
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_ARVALID : STD_LOGIC;
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_RREADY : STD_LOGIC;
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_BREADY : STD_LOGIC;
    signal grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln1086_fu_253_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state109 : BOOLEAN;
    signal y_fu_106 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal yoffset_fu_110 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln1092_fu_263_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln1076_fu_158_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1076_fu_162_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal div8_fu_182_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln_fu_226_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln1086_fu_234_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1086_fu_238_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (108 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ST_fsm_state87_blk : STD_LOGIC;
    signal ap_ST_fsm_state88_blk : STD_LOGIC;
    signal ap_ST_fsm_state89_blk : STD_LOGIC;
    signal ap_ST_fsm_state90_blk : STD_LOGIC;
    signal ap_ST_fsm_state91_blk : STD_LOGIC;
    signal ap_ST_fsm_state92_blk : STD_LOGIC;
    signal ap_ST_fsm_state93_blk : STD_LOGIC;
    signal ap_ST_fsm_state94_blk : STD_LOGIC;
    signal ap_ST_fsm_state95_blk : STD_LOGIC;
    signal ap_ST_fsm_state96_blk : STD_LOGIC;
    signal ap_ST_fsm_state97_blk : STD_LOGIC;
    signal ap_ST_fsm_state98_blk : STD_LOGIC;
    signal ap_ST_fsm_state99_blk : STD_LOGIC;
    signal ap_ST_fsm_state100_blk : STD_LOGIC;
    signal ap_ST_fsm_state101_blk : STD_LOGIC;
    signal ap_ST_fsm_state102_blk : STD_LOGIC;
    signal ap_ST_fsm_state103_blk : STD_LOGIC;
    signal ap_ST_fsm_state104_blk : STD_LOGIC;
    signal ap_ST_fsm_state105_blk : STD_LOGIC;
    signal ap_ST_fsm_state106_blk : STD_LOGIC;
    signal ap_ST_fsm_state107_blk : STD_LOGIC;
    signal ap_ST_fsm_state108_blk : STD_LOGIC;
    signal ap_ST_fsm_state109_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component design_1_v_frmbuf_wr_0_0_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        bytePlanes1_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        bytePlanes1_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
        bytePlanes1_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
        bytePlanes1_empty_n : IN STD_LOGIC;
        bytePlanes1_read : OUT STD_LOGIC;
        m_axi_mm_video_AWVALID : OUT STD_LOGIC;
        m_axi_mm_video_AWREADY : IN STD_LOGIC;
        m_axi_mm_video_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mm_video_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mm_video_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mm_video_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mm_video_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mm_video_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mm_video_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mm_video_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mm_video_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mm_video_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mm_video_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mm_video_WVALID : OUT STD_LOGIC;
        m_axi_mm_video_WREADY : IN STD_LOGIC;
        m_axi_mm_video_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_mm_video_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mm_video_WLAST : OUT STD_LOGIC;
        m_axi_mm_video_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mm_video_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mm_video_ARVALID : OUT STD_LOGIC;
        m_axi_mm_video_ARREADY : IN STD_LOGIC;
        m_axi_mm_video_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mm_video_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mm_video_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mm_video_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mm_video_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mm_video_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mm_video_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mm_video_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mm_video_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mm_video_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mm_video_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mm_video_RVALID : IN STD_LOGIC;
        m_axi_mm_video_RREADY : OUT STD_LOGIC;
        m_axi_mm_video_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_mm_video_RLAST : IN STD_LOGIC;
        m_axi_mm_video_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mm_video_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_mm_video_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mm_video_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mm_video_BVALID : IN STD_LOGIC;
        m_axi_mm_video_BREADY : OUT STD_LOGIC;
        m_axi_mm_video_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mm_video_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mm_video_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln1086 : IN STD_LOGIC_VECTOR (26 downto 0);
        loopWidth : IN STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145 : component design_1_v_frmbuf_wr_0_0_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_ap_start,
        ap_done => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_ap_done,
        ap_idle => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_ap_idle,
        ap_ready => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_ap_ready,
        bytePlanes1_dout => bytePlanes1_dout,
        bytePlanes1_num_data_valid => ap_const_lv10_0,
        bytePlanes1_fifo_cap => ap_const_lv10_0,
        bytePlanes1_empty_n => bytePlanes1_empty_n,
        bytePlanes1_read => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_bytePlanes1_read,
        m_axi_mm_video_AWVALID => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWVALID,
        m_axi_mm_video_AWREADY => m_axi_mm_video_AWREADY,
        m_axi_mm_video_AWADDR => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWADDR,
        m_axi_mm_video_AWID => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWID,
        m_axi_mm_video_AWLEN => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWLEN,
        m_axi_mm_video_AWSIZE => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWSIZE,
        m_axi_mm_video_AWBURST => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWBURST,
        m_axi_mm_video_AWLOCK => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWLOCK,
        m_axi_mm_video_AWCACHE => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWCACHE,
        m_axi_mm_video_AWPROT => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWPROT,
        m_axi_mm_video_AWQOS => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWQOS,
        m_axi_mm_video_AWREGION => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWREGION,
        m_axi_mm_video_AWUSER => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWUSER,
        m_axi_mm_video_WVALID => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_WVALID,
        m_axi_mm_video_WREADY => m_axi_mm_video_WREADY,
        m_axi_mm_video_WDATA => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_WDATA,
        m_axi_mm_video_WSTRB => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_WSTRB,
        m_axi_mm_video_WLAST => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_WLAST,
        m_axi_mm_video_WID => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_WID,
        m_axi_mm_video_WUSER => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_WUSER,
        m_axi_mm_video_ARVALID => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_ARVALID,
        m_axi_mm_video_ARREADY => ap_const_logic_0,
        m_axi_mm_video_ARADDR => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_ARADDR,
        m_axi_mm_video_ARID => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_ARID,
        m_axi_mm_video_ARLEN => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_ARLEN,
        m_axi_mm_video_ARSIZE => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_ARSIZE,
        m_axi_mm_video_ARBURST => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_ARBURST,
        m_axi_mm_video_ARLOCK => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_ARLOCK,
        m_axi_mm_video_ARCACHE => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_ARCACHE,
        m_axi_mm_video_ARPROT => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_ARPROT,
        m_axi_mm_video_ARQOS => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_ARQOS,
        m_axi_mm_video_ARREGION => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_ARREGION,
        m_axi_mm_video_ARUSER => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_ARUSER,
        m_axi_mm_video_RVALID => ap_const_logic_0,
        m_axi_mm_video_RREADY => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_RREADY,
        m_axi_mm_video_RDATA => ap_const_lv256_lc_1,
        m_axi_mm_video_RLAST => ap_const_logic_0,
        m_axi_mm_video_RID => ap_const_lv1_0,
        m_axi_mm_video_RFIFONUM => ap_const_lv9_0,
        m_axi_mm_video_RUSER => ap_const_lv1_0,
        m_axi_mm_video_RRESP => ap_const_lv2_0,
        m_axi_mm_video_BVALID => m_axi_mm_video_BVALID,
        m_axi_mm_video_BREADY => grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_BREADY,
        m_axi_mm_video_BRESP => m_axi_mm_video_BRESP,
        m_axi_mm_video_BID => m_axi_mm_video_BID,
        m_axi_mm_video_BUSER => m_axi_mm_video_BUSER,
        sext_ln1086 => trunc_ln5_reg_328,
        loopWidth => loopWidth_reg_301);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln1082_fu_215_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_ap_ready = ap_const_logic_1)) then 
                    grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    y_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = StrideInBytes_empty_n) or (ap_const_logic_0 = WidthInBytes_empty_n) or (ap_const_logic_0 = Height_empty_n) or (dstImg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_fu_106 <= ap_const_lv12_0;
            elsif ((not(((cmp32_reg_311 = ap_const_lv1_0) and (m_axi_mm_video_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state109))) then 
                y_fu_106 <= y_7_reg_323;
            end if; 
        end if;
    end process;

    yoffset_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = StrideInBytes_empty_n) or (ap_const_logic_0 = WidthInBytes_empty_n) or (ap_const_logic_0 = Height_empty_n) or (dstImg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                yoffset_fu_110 <= ap_const_lv23_0;
            elsif ((not(((cmp32_reg_311 = ap_const_lv1_0) and (m_axi_mm_video_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state109))) then 
                yoffset_fu_110 <= add_ln1092_fu_263_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                Height_read_reg_291 <= Height_dout;
                cmp32_reg_311 <= cmp32_fu_192_p2;
                dstImg_read_reg_296 <= dstImg_dout;
                loopWidth_reg_301 <= add_ln1076_fu_162_p2(15 downto 5);
                    zext_ln1076_1_reg_306(10 downto 0) <= zext_ln1076_1_fu_178_p1(10 downto 0);
                    zext_ln1082_reg_315(10 downto 0) <= zext_ln1082_fu_198_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1082_fu_215_p2 = ap_const_lv1_0) and (cmp32_reg_311 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln5_reg_328 <= add_ln1086_fu_238_p2(31 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                y_7_reg_323 <= y_7_fu_220_p2;
            end if;
        end if;
    end process;
    zext_ln1076_1_reg_306(31 downto 11) <= "000000000000000000000";
    zext_ln1082_reg_315(22 downto 11) <= "000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_mm_video_AWREADY, m_axi_mm_video_BVALID, dstImg_empty_n, Height_empty_n, WidthInBytes_empty_n, StrideInBytes_empty_n, ap_CS_fsm_state3, ap_CS_fsm_state109, cmp32_reg_311, ap_CS_fsm_state2, icmp_ln1082_fu_215_p2, grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_ap_done, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = StrideInBytes_empty_n) or (ap_const_logic_0 = WidthInBytes_empty_n) or (ap_const_logic_0 = Height_empty_n) or (dstImg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln1082_fu_215_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((icmp_ln1082_fu_215_p2 = ap_const_lv1_0) and (cmp32_reg_311 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state109;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (m_axi_mm_video_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                if ((not(((cmp32_reg_311 = ap_const_lv1_0) and (m_axi_mm_video_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state109))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state109;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    Height_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, Height_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Height_blk_n <= Height_empty_n;
        else 
            Height_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Height_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, dstImg_empty_n, Height_empty_n, WidthInBytes_empty_n, StrideInBytes_empty_n)
    begin
        if ((not(((ap_const_logic_0 = StrideInBytes_empty_n) or (ap_const_logic_0 = WidthInBytes_empty_n) or (ap_const_logic_0 = Height_empty_n) or (dstImg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Height_read <= ap_const_logic_1;
        else 
            Height_read <= ap_const_logic_0;
        end if; 
    end process;


    StrideInBytes_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, StrideInBytes_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            StrideInBytes_blk_n <= StrideInBytes_empty_n;
        else 
            StrideInBytes_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    StrideInBytes_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, dstImg_empty_n, Height_empty_n, WidthInBytes_empty_n, StrideInBytes_empty_n)
    begin
        if ((not(((ap_const_logic_0 = StrideInBytes_empty_n) or (ap_const_logic_0 = WidthInBytes_empty_n) or (ap_const_logic_0 = Height_empty_n) or (dstImg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            StrideInBytes_read <= ap_const_logic_1;
        else 
            StrideInBytes_read <= ap_const_logic_0;
        end if; 
    end process;


    WidthInBytes_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, WidthInBytes_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            WidthInBytes_blk_n <= WidthInBytes_empty_n;
        else 
            WidthInBytes_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    WidthInBytes_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, dstImg_empty_n, Height_empty_n, WidthInBytes_empty_n, StrideInBytes_empty_n)
    begin
        if ((not(((ap_const_logic_0 = StrideInBytes_empty_n) or (ap_const_logic_0 = WidthInBytes_empty_n) or (ap_const_logic_0 = Height_empty_n) or (dstImg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            WidthInBytes_read <= ap_const_logic_1;
        else 
            WidthInBytes_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1076_fu_162_p2 <= std_logic_vector(unsigned(zext_ln1076_fu_158_p1) + unsigned(ap_const_lv16_1F));
    add_ln1086_fu_238_p2 <= std_logic_vector(unsigned(dstImg_read_reg_296) + unsigned(zext_ln1086_fu_234_p1));
    add_ln1092_fu_263_p2 <= std_logic_vector(unsigned(zext_ln1082_reg_315) + unsigned(yoffset_fu_110));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state109 <= ap_CS_fsm(108);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_ST_fsm_state100_blk <= ap_const_logic_0;
    ap_ST_fsm_state101_blk <= ap_const_logic_0;
    ap_ST_fsm_state102_blk <= ap_const_logic_0;
    ap_ST_fsm_state103_blk <= ap_const_logic_0;
    ap_ST_fsm_state104_blk <= ap_const_logic_0;
    ap_ST_fsm_state105_blk <= ap_const_logic_0;
    ap_ST_fsm_state106_blk <= ap_const_logic_0;
    ap_ST_fsm_state107_blk <= ap_const_logic_0;
    ap_ST_fsm_state108_blk <= ap_const_logic_0;

    ap_ST_fsm_state109_blk_assign_proc : process(m_axi_mm_video_BVALID, cmp32_reg_311)
    begin
        if (((cmp32_reg_311 = ap_const_lv1_0) and (m_axi_mm_video_BVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state109_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state109_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, dstImg_empty_n, Height_empty_n, WidthInBytes_empty_n, StrideInBytes_empty_n)
    begin
        if (((ap_const_logic_0 = StrideInBytes_empty_n) or (ap_const_logic_0 = WidthInBytes_empty_n) or (ap_const_logic_0 = Height_empty_n) or (dstImg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(m_axi_mm_video_AWREADY)
    begin
        if ((m_axi_mm_video_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_ap_done)
    begin
        if ((grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;
    ap_ST_fsm_state76_blk <= ap_const_logic_0;
    ap_ST_fsm_state77_blk <= ap_const_logic_0;
    ap_ST_fsm_state78_blk <= ap_const_logic_0;
    ap_ST_fsm_state79_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state80_blk <= ap_const_logic_0;
    ap_ST_fsm_state81_blk <= ap_const_logic_0;
    ap_ST_fsm_state82_blk <= ap_const_logic_0;
    ap_ST_fsm_state83_blk <= ap_const_logic_0;
    ap_ST_fsm_state84_blk <= ap_const_logic_0;
    ap_ST_fsm_state85_blk <= ap_const_logic_0;
    ap_ST_fsm_state86_blk <= ap_const_logic_0;
    ap_ST_fsm_state87_blk <= ap_const_logic_0;
    ap_ST_fsm_state88_blk <= ap_const_logic_0;
    ap_ST_fsm_state89_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state90_blk <= ap_const_logic_0;
    ap_ST_fsm_state91_blk <= ap_const_logic_0;
    ap_ST_fsm_state92_blk <= ap_const_logic_0;
    ap_ST_fsm_state93_blk <= ap_const_logic_0;
    ap_ST_fsm_state94_blk <= ap_const_logic_0;
    ap_ST_fsm_state95_blk <= ap_const_logic_0;
    ap_ST_fsm_state96_blk <= ap_const_logic_0;
    ap_ST_fsm_state97_blk <= ap_const_logic_0;
    ap_ST_fsm_state98_blk <= ap_const_logic_0;
    ap_ST_fsm_state99_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, dstImg_empty_n, Height_empty_n, WidthInBytes_empty_n, StrideInBytes_empty_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = StrideInBytes_empty_n) or (ap_const_logic_0 = WidthInBytes_empty_n) or (ap_const_logic_0 = Height_empty_n) or (dstImg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state109_assign_proc : process(m_axi_mm_video_BVALID, cmp32_reg_311)
    begin
                ap_block_state109 <= ((cmp32_reg_311 = ap_const_lv1_0) and (m_axi_mm_video_BVALID = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln1082_fu_215_p2)
    begin
        if (((icmp_ln1082_fu_215_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln1082_fu_215_p2)
    begin
        if (((icmp_ln1082_fu_215_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    bytePlanes1_read_assign_proc : process(grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_bytePlanes1_read, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bytePlanes1_read <= grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_bytePlanes1_read;
        else 
            bytePlanes1_read <= ap_const_logic_0;
        end if; 
    end process;

    cmp32_fu_192_p2 <= "1" when (loopWidth_fu_168_p4 = ap_const_lv11_0) else "0";
    div8_fu_182_p4 <= StrideInBytes_dout(15 downto 5);

    dstImg_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, dstImg_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dstImg_blk_n <= dstImg_empty_n;
        else 
            dstImg_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dstImg_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, dstImg_empty_n, Height_empty_n, WidthInBytes_empty_n, StrideInBytes_empty_n)
    begin
        if ((not(((ap_const_logic_0 = StrideInBytes_empty_n) or (ap_const_logic_0 = WidthInBytes_empty_n) or (ap_const_logic_0 = Height_empty_n) or (dstImg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dstImg_read <= ap_const_logic_1;
        else 
            dstImg_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_ap_start <= grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_ap_start_reg;
    icmp_ln1082_fu_215_p2 <= "1" when (y_fu_106 = Height_read_reg_291) else "0";
    loopWidth_fu_168_p4 <= add_ln1076_fu_162_p2(15 downto 5);
    m_axi_mm_video_ARADDR <= ap_const_lv32_0;
    m_axi_mm_video_ARBURST <= ap_const_lv2_0;
    m_axi_mm_video_ARCACHE <= ap_const_lv4_0;
    m_axi_mm_video_ARID <= ap_const_lv1_0;
    m_axi_mm_video_ARLEN <= ap_const_lv32_0;
    m_axi_mm_video_ARLOCK <= ap_const_lv2_0;
    m_axi_mm_video_ARPROT <= ap_const_lv3_0;
    m_axi_mm_video_ARQOS <= ap_const_lv4_0;
    m_axi_mm_video_ARREGION <= ap_const_lv4_0;
    m_axi_mm_video_ARSIZE <= ap_const_lv3_0;
    m_axi_mm_video_ARUSER <= ap_const_lv1_0;
    m_axi_mm_video_ARVALID <= ap_const_logic_0;

    m_axi_mm_video_AWADDR_assign_proc : process(m_axi_mm_video_AWREADY, ap_CS_fsm_state3, grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWADDR, ap_CS_fsm_state4, ap_CS_fsm_state5, sext_ln1086_fu_253_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (m_axi_mm_video_AWREADY = ap_const_logic_1))) then 
            m_axi_mm_video_AWADDR <= sext_ln1086_fu_253_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_mm_video_AWADDR <= grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWADDR;
        else 
            m_axi_mm_video_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_mm_video_AWBURST_assign_proc : process(grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWBURST, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_mm_video_AWBURST <= grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWBURST;
        else 
            m_axi_mm_video_AWBURST <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_mm_video_AWCACHE_assign_proc : process(grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWCACHE, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_mm_video_AWCACHE <= grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWCACHE;
        else 
            m_axi_mm_video_AWCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_mm_video_AWID_assign_proc : process(grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWID, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_mm_video_AWID <= grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWID;
        else 
            m_axi_mm_video_AWID <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_mm_video_AWLEN_assign_proc : process(m_axi_mm_video_AWREADY, ap_CS_fsm_state3, zext_ln1076_1_reg_306, grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWLEN, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (m_axi_mm_video_AWREADY = ap_const_logic_1))) then 
            m_axi_mm_video_AWLEN <= zext_ln1076_1_reg_306;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_mm_video_AWLEN <= grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWLEN;
        else 
            m_axi_mm_video_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_mm_video_AWLOCK_assign_proc : process(grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWLOCK, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_mm_video_AWLOCK <= grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWLOCK;
        else 
            m_axi_mm_video_AWLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_mm_video_AWPROT_assign_proc : process(grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWPROT, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_mm_video_AWPROT <= grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWPROT;
        else 
            m_axi_mm_video_AWPROT <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_mm_video_AWQOS_assign_proc : process(grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWQOS, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_mm_video_AWQOS <= grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWQOS;
        else 
            m_axi_mm_video_AWQOS <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_mm_video_AWREGION_assign_proc : process(grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWREGION, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_mm_video_AWREGION <= grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWREGION;
        else 
            m_axi_mm_video_AWREGION <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_mm_video_AWSIZE_assign_proc : process(grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWSIZE, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_mm_video_AWSIZE <= grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWSIZE;
        else 
            m_axi_mm_video_AWSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_mm_video_AWUSER_assign_proc : process(grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWUSER, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_mm_video_AWUSER <= grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWUSER;
        else 
            m_axi_mm_video_AWUSER <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_mm_video_AWVALID_assign_proc : process(m_axi_mm_video_AWREADY, ap_CS_fsm_state3, grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWVALID, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (m_axi_mm_video_AWREADY = ap_const_logic_1))) then 
            m_axi_mm_video_AWVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_mm_video_AWVALID <= grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_AWVALID;
        else 
            m_axi_mm_video_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_mm_video_BREADY_assign_proc : process(m_axi_mm_video_BVALID, ap_CS_fsm_state109, cmp32_reg_311, grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_BREADY, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((not(((cmp32_reg_311 = ap_const_lv1_0) and (m_axi_mm_video_BVALID = ap_const_logic_0))) and (cmp32_reg_311 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state109))) then 
            m_axi_mm_video_BREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_mm_video_BREADY <= grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_BREADY;
        else 
            m_axi_mm_video_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mm_video_RREADY <= ap_const_logic_0;
    m_axi_mm_video_WDATA <= grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_WDATA;
    m_axi_mm_video_WID <= grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_WID;
    m_axi_mm_video_WLAST <= grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_WLAST;
    m_axi_mm_video_WSTRB <= grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_WSTRB;
    m_axi_mm_video_WUSER <= grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_WUSER;

    m_axi_mm_video_WVALID_assign_proc : process(grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_WVALID, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_mm_video_WVALID <= grp_Bytes2AXIMMvideo_Pipeline_VITIS_LOOP_1086_1_fu_145_m_axi_mm_video_WVALID;
        else 
            m_axi_mm_video_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    mm_video_blk_n_AW_assign_proc : process(m_axi_mm_video_AWREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mm_video_blk_n_AW <= m_axi_mm_video_AWREADY;
        else 
            mm_video_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    mm_video_blk_n_B_assign_proc : process(m_axi_mm_video_BVALID, ap_CS_fsm_state109, cmp32_reg_311)
    begin
        if (((cmp32_reg_311 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state109))) then 
            mm_video_blk_n_B <= m_axi_mm_video_BVALID;
        else 
            mm_video_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;

        sext_ln1086_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln5_reg_328),32));

    shl_ln_fu_226_p3 <= (yoffset_fu_110 & ap_const_lv5_0);
    y_7_fu_220_p2 <= std_logic_vector(unsigned(y_fu_106) + unsigned(ap_const_lv12_1));
    zext_ln1076_1_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loopWidth_fu_168_p4),32));
    zext_ln1076_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(WidthInBytes_dout),16));
    zext_ln1082_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(div8_fu_182_p4),23));
    zext_ln1086_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_226_p3),32));
end behav;
