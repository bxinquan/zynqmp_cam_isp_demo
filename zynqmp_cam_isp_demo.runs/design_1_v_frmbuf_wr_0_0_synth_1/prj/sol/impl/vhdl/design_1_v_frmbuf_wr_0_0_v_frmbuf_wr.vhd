-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity design_1_v_frmbuf_wr_0_0_v_frmbuf_wr is
generic (
    C_M_AXI_MM_VIDEO_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_MM_VIDEO_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MM_VIDEO_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MM_VIDEO_DATA_WIDTH : INTEGER := 256;
    C_M_AXI_MM_VIDEO_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MM_VIDEO_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MM_VIDEO_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MM_VIDEO_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MM_VIDEO_USER_VALUE : INTEGER := 0;
    C_M_AXI_MM_VIDEO_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MM_VIDEO_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_mm_video_AWVALID : OUT STD_LOGIC;
    m_axi_mm_video_AWREADY : IN STD_LOGIC;
    m_axi_mm_video_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MM_VIDEO_ADDR_WIDTH-1 downto 0);
    m_axi_mm_video_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MM_VIDEO_ID_WIDTH-1 downto 0);
    m_axi_mm_video_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mm_video_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mm_video_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mm_video_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mm_video_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mm_video_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mm_video_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mm_video_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mm_video_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MM_VIDEO_AWUSER_WIDTH-1 downto 0);
    m_axi_mm_video_WVALID : OUT STD_LOGIC;
    m_axi_mm_video_WREADY : IN STD_LOGIC;
    m_axi_mm_video_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MM_VIDEO_DATA_WIDTH-1 downto 0);
    m_axi_mm_video_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MM_VIDEO_DATA_WIDTH/8-1 downto 0);
    m_axi_mm_video_WLAST : OUT STD_LOGIC;
    m_axi_mm_video_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MM_VIDEO_ID_WIDTH-1 downto 0);
    m_axi_mm_video_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MM_VIDEO_WUSER_WIDTH-1 downto 0);
    m_axi_mm_video_ARVALID : OUT STD_LOGIC;
    m_axi_mm_video_ARREADY : IN STD_LOGIC;
    m_axi_mm_video_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MM_VIDEO_ADDR_WIDTH-1 downto 0);
    m_axi_mm_video_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MM_VIDEO_ID_WIDTH-1 downto 0);
    m_axi_mm_video_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mm_video_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mm_video_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mm_video_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mm_video_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mm_video_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mm_video_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mm_video_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mm_video_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MM_VIDEO_ARUSER_WIDTH-1 downto 0);
    m_axi_mm_video_RVALID : IN STD_LOGIC;
    m_axi_mm_video_RREADY : OUT STD_LOGIC;
    m_axi_mm_video_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MM_VIDEO_DATA_WIDTH-1 downto 0);
    m_axi_mm_video_RLAST : IN STD_LOGIC;
    m_axi_mm_video_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MM_VIDEO_ID_WIDTH-1 downto 0);
    m_axi_mm_video_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MM_VIDEO_RUSER_WIDTH-1 downto 0);
    m_axi_mm_video_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mm_video_BVALID : IN STD_LOGIC;
    m_axi_mm_video_BREADY : OUT STD_LOGIC;
    m_axi_mm_video_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mm_video_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MM_VIDEO_ID_WIDTH-1 downto 0);
    m_axi_mm_video_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MM_VIDEO_BUSER_WIDTH-1 downto 0);
    s_axis_video_TDATA : IN STD_LOGIC_VECTOR (119 downto 0);
    s_axis_video_TVALID : IN STD_LOGIC;
    s_axis_video_TREADY : OUT STD_LOGIC;
    s_axis_video_TKEEP : IN STD_LOGIC_VECTOR (14 downto 0);
    s_axis_video_TSTRB : IN STD_LOGIC_VECTOR (14 downto 0);
    s_axis_video_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of design_1_v_frmbuf_wr_0_0_v_frmbuf_wr is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "design_1_v_frmbuf_wr_0_0_v_frmbuf_wr,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.433090,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=15,HLS_SYN_DSP=0,HLS_SYN_FF=5698,HLS_SYN_LUT=6250,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv6_2B : STD_LOGIC_VECTOR (5 downto 0) := "101011";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv6_17 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_const_lv6_16 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv31_AAAB : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001010101010101011";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal width : STD_LOGIC_VECTOR (15 downto 0);
    signal height : STD_LOGIC_VECTOR (15 downto 0);
    signal stride : STD_LOGIC_VECTOR (15 downto 0);
    signal video_format : STD_LOGIC_VECTOR (15 downto 0);
    signal frm_buffer : STD_LOGIC_VECTOR (31 downto 0);
    signal frm_buffer2 : STD_LOGIC_VECTOR (31 downto 0);
    signal frm_buffer3 : STD_LOGIC_VECTOR (31 downto 0);
    signal BYTES_PER_PIXEL_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal BYTES_PER_PIXEL_ce0 : STD_LOGIC;
    signal BYTES_PER_PIXEL_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal MEMORY2LIVE_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal MEMORY2LIVE_ce0 : STD_LOGIC;
    signal MEMORY2LIVE_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal frm_buffer_read_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal stride_read_reg_323 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_fu_215_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_reg_328 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_63_fu_219_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_63_reg_333 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_64_fu_223_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_64_reg_338 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln132_fu_227_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln132_reg_343 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_71_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_71_reg_348 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln150_fu_274_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln150_reg_357 : STD_LOGIC_VECTOR (14 downto 0);
    signal BYTES_PER_PIXEL_load_reg_367 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mul_ln150_fu_293_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln150_reg_372 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln138_1_fu_307_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal colorFormat_reg_387 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_AWVALID : STD_LOGIC;
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_WVALID : STD_LOGIC;
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_WLAST : STD_LOGIC;
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_ARVALID : STD_LOGIC;
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_RREADY : STD_LOGIC;
    signal grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_BREADY : STD_LOGIC;
    signal grp_FrmbufWrHlsDataFlow_fu_186_ap_start : STD_LOGIC;
    signal grp_FrmbufWrHlsDataFlow_fu_186_s_axis_video_TREADY : STD_LOGIC;
    signal grp_FrmbufWrHlsDataFlow_fu_186_ap_done : STD_LOGIC;
    signal grp_FrmbufWrHlsDataFlow_fu_186_ap_ready : STD_LOGIC;
    signal grp_FrmbufWrHlsDataFlow_fu_186_ap_idle : STD_LOGIC;
    signal grp_FrmbufWrHlsDataFlow_fu_186_ap_continue : STD_LOGIC;
    signal flush : STD_LOGIC;
    signal s_axi_CTRL_flush_done : STD_LOGIC;
    signal m_axi_mm_video_flush_done : STD_LOGIC;
    signal mm_video_AWVALID : STD_LOGIC;
    signal mm_video_AWREADY : STD_LOGIC;
    signal mm_video_WVALID : STD_LOGIC;
    signal mm_video_WREADY : STD_LOGIC;
    signal mm_video_ARREADY : STD_LOGIC;
    signal mm_video_RVALID : STD_LOGIC;
    signal mm_video_RDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal mm_video_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal mm_video_BVALID : STD_LOGIC;
    signal mm_video_BREADY : STD_LOGIC;
    signal WidthInBytes_reg_176 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_FrmbufWrHlsDataFlow_fu_186_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_sync_grp_FrmbufWrHlsDataFlow_fu_186_ap_ready : STD_LOGIC;
    signal ap_sync_grp_FrmbufWrHlsDataFlow_fu_186_ap_done : STD_LOGIC;
    signal ap_block_state8_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_FrmbufWrHlsDataFlow_fu_186_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_FrmbufWrHlsDataFlow_fu_186_ap_done : STD_LOGIC := '0';
    signal empty_66_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_65_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_68_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_67_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_70_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_69_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_278_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln150_fu_293_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_298_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_311_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_298_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_311_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_311_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal regslice_both_s_axis_video_V_data_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TDATA_int_regslice : STD_LOGIC_VECTOR (119 downto 0);
    signal s_axis_video_TVALID_int_regslice : STD_LOGIC;
    signal s_axis_video_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_s_axis_video_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TKEEP_int_regslice : STD_LOGIC_VECTOR (14 downto 0);
    signal regslice_both_s_axis_video_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TSTRB_int_regslice : STD_LOGIC_VECTOR (14 downto 0);
    signal regslice_both_s_axis_video_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_user_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_last_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_id_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_dest_V_U_ack_in : STD_LOGIC;
    signal grp_fu_311_p00 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln150_fu_293_p10 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component design_1_v_frmbuf_wr_0_0_FrmbufWrHlsDataFlow IS
    port (
        s_axis_video_TDATA : IN STD_LOGIC_VECTOR (119 downto 0);
        s_axis_video_TKEEP : IN STD_LOGIC_VECTOR (14 downto 0);
        s_axis_video_TSTRB : IN STD_LOGIC_VECTOR (14 downto 0);
        s_axis_video_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mm_video_AWVALID : OUT STD_LOGIC;
        m_axi_mm_video_AWREADY : IN STD_LOGIC;
        m_axi_mm_video_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mm_video_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mm_video_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mm_video_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mm_video_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mm_video_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mm_video_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mm_video_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mm_video_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mm_video_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mm_video_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mm_video_WVALID : OUT STD_LOGIC;
        m_axi_mm_video_WREADY : IN STD_LOGIC;
        m_axi_mm_video_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_mm_video_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mm_video_WLAST : OUT STD_LOGIC;
        m_axi_mm_video_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mm_video_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mm_video_ARVALID : OUT STD_LOGIC;
        m_axi_mm_video_ARREADY : IN STD_LOGIC;
        m_axi_mm_video_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mm_video_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mm_video_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mm_video_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mm_video_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mm_video_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mm_video_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mm_video_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mm_video_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mm_video_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mm_video_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mm_video_RVALID : IN STD_LOGIC;
        m_axi_mm_video_RREADY : OUT STD_LOGIC;
        m_axi_mm_video_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_mm_video_RLAST : IN STD_LOGIC;
        m_axi_mm_video_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mm_video_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_mm_video_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mm_video_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mm_video_BVALID : IN STD_LOGIC;
        m_axi_mm_video_BREADY : OUT STD_LOGIC;
        m_axi_mm_video_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mm_video_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mm_video_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        HwReg_frm_buffer : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (14 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (2 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (12 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (11 downto 0);
        p_read14 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read25 : IN STD_LOGIC_VECTOR (5 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        HwReg_frm_buffer_ap_vld : IN STD_LOGIC;
        p_read_ap_vld : IN STD_LOGIC;
        p_read14_ap_vld : IN STD_LOGIC;
        p_read25_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        s_axis_video_TVALID : IN STD_LOGIC;
        s_axis_video_TREADY : OUT STD_LOGIC;
        p_read3_ap_vld : IN STD_LOGIC;
        p_read2_ap_vld : IN STD_LOGIC;
        p_read1_ap_vld : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component design_1_v_frmbuf_wr_0_0_mul_15s_3ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component design_1_v_frmbuf_wr_0_0_mul_mul_15ns_16ns_31_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component design_1_v_frmbuf_wr_0_0_BYTES_PER_PIXEL_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component design_1_v_frmbuf_wr_0_0_MEMORY2LIVE_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component design_1_v_frmbuf_wr_0_0_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        width : OUT STD_LOGIC_VECTOR (15 downto 0);
        height : OUT STD_LOGIC_VECTOR (15 downto 0);
        stride : OUT STD_LOGIC_VECTOR (15 downto 0);
        video_format : OUT STD_LOGIC_VECTOR (15 downto 0);
        frm_buffer : OUT STD_LOGIC_VECTOR (31 downto 0);
        frm_buffer2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        frm_buffer3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        flush : OUT STD_LOGIC;
        flush_done : IN STD_LOGIC );
    end component;


    component design_1_v_frmbuf_wr_0_0_mm_video_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        flush : IN STD_LOGIC;
        flush_done : OUT STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component design_1_v_frmbuf_wr_0_0_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    BYTES_PER_PIXEL_U : component design_1_v_frmbuf_wr_0_0_BYTES_PER_PIXEL_ROM_AUTO_1R
    generic map (
        DataWidth => 3,
        AddressRange => 44,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => BYTES_PER_PIXEL_address0,
        ce0 => BYTES_PER_PIXEL_ce0,
        q0 => BYTES_PER_PIXEL_q0);

    MEMORY2LIVE_U : component design_1_v_frmbuf_wr_0_0_MEMORY2LIVE_ROM_AUTO_1R
    generic map (
        DataWidth => 3,
        AddressRange => 44,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => MEMORY2LIVE_address0,
        ce0 => MEMORY2LIVE_ce0,
        q0 => MEMORY2LIVE_q0);

    grp_FrmbufWrHlsDataFlow_fu_186 : component design_1_v_frmbuf_wr_0_0_FrmbufWrHlsDataFlow
    port map (
        s_axis_video_TDATA => s_axis_video_TDATA_int_regslice,
        s_axis_video_TKEEP => s_axis_video_TKEEP_int_regslice,
        s_axis_video_TSTRB => s_axis_video_TSTRB_int_regslice,
        s_axis_video_TUSER => s_axis_video_TUSER_int_regslice,
        s_axis_video_TLAST => s_axis_video_TLAST_int_regslice,
        s_axis_video_TID => s_axis_video_TID_int_regslice,
        s_axis_video_TDEST => s_axis_video_TDEST_int_regslice,
        m_axi_mm_video_AWVALID => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_AWVALID,
        m_axi_mm_video_AWREADY => mm_video_AWREADY,
        m_axi_mm_video_AWADDR => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_AWADDR,
        m_axi_mm_video_AWID => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_AWID,
        m_axi_mm_video_AWLEN => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_AWLEN,
        m_axi_mm_video_AWSIZE => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_AWSIZE,
        m_axi_mm_video_AWBURST => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_AWBURST,
        m_axi_mm_video_AWLOCK => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_AWLOCK,
        m_axi_mm_video_AWCACHE => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_AWCACHE,
        m_axi_mm_video_AWPROT => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_AWPROT,
        m_axi_mm_video_AWQOS => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_AWQOS,
        m_axi_mm_video_AWREGION => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_AWREGION,
        m_axi_mm_video_AWUSER => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_AWUSER,
        m_axi_mm_video_WVALID => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_WVALID,
        m_axi_mm_video_WREADY => mm_video_WREADY,
        m_axi_mm_video_WDATA => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_WDATA,
        m_axi_mm_video_WSTRB => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_WSTRB,
        m_axi_mm_video_WLAST => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_WLAST,
        m_axi_mm_video_WID => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_WID,
        m_axi_mm_video_WUSER => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_WUSER,
        m_axi_mm_video_ARVALID => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_ARVALID,
        m_axi_mm_video_ARREADY => ap_const_logic_0,
        m_axi_mm_video_ARADDR => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_ARADDR,
        m_axi_mm_video_ARID => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_ARID,
        m_axi_mm_video_ARLEN => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_ARLEN,
        m_axi_mm_video_ARSIZE => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_ARSIZE,
        m_axi_mm_video_ARBURST => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_ARBURST,
        m_axi_mm_video_ARLOCK => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_ARLOCK,
        m_axi_mm_video_ARCACHE => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_ARCACHE,
        m_axi_mm_video_ARPROT => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_ARPROT,
        m_axi_mm_video_ARQOS => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_ARQOS,
        m_axi_mm_video_ARREGION => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_ARREGION,
        m_axi_mm_video_ARUSER => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_ARUSER,
        m_axi_mm_video_RVALID => ap_const_logic_0,
        m_axi_mm_video_RREADY => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_RREADY,
        m_axi_mm_video_RDATA => ap_const_lv256_lc_1,
        m_axi_mm_video_RLAST => ap_const_logic_0,
        m_axi_mm_video_RID => ap_const_lv1_0,
        m_axi_mm_video_RFIFONUM => ap_const_lv9_0,
        m_axi_mm_video_RUSER => ap_const_lv1_0,
        m_axi_mm_video_RRESP => ap_const_lv2_0,
        m_axi_mm_video_BVALID => mm_video_BVALID,
        m_axi_mm_video_BREADY => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_BREADY,
        m_axi_mm_video_BRESP => ap_const_lv2_0,
        m_axi_mm_video_BID => ap_const_lv1_0,
        m_axi_mm_video_BUSER => ap_const_lv1_0,
        HwReg_frm_buffer => frm_buffer_read_reg_318,
        p_read => WidthInBytes_reg_176,
        p_read1 => colorFormat_reg_387,
        p_read2 => empty_64_reg_338,
        p_read3 => empty_63_reg_333,
        p_read14 => stride_read_reg_323,
        p_read25 => empty_reg_328,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        HwReg_frm_buffer_ap_vld => ap_const_logic_1,
        p_read_ap_vld => ap_const_logic_1,
        p_read14_ap_vld => ap_const_logic_1,
        p_read25_ap_vld => ap_const_logic_1,
        ap_start => grp_FrmbufWrHlsDataFlow_fu_186_ap_start,
        s_axis_video_TVALID => s_axis_video_TVALID_int_regslice,
        s_axis_video_TREADY => grp_FrmbufWrHlsDataFlow_fu_186_s_axis_video_TREADY,
        p_read3_ap_vld => ap_const_logic_1,
        p_read2_ap_vld => ap_const_logic_1,
        p_read1_ap_vld => ap_const_logic_1,
        ap_done => grp_FrmbufWrHlsDataFlow_fu_186_ap_done,
        ap_ready => grp_FrmbufWrHlsDataFlow_fu_186_ap_ready,
        ap_idle => grp_FrmbufWrHlsDataFlow_fu_186_ap_idle,
        ap_continue => grp_FrmbufWrHlsDataFlow_fu_186_ap_continue);

    CTRL_s_axi_U : component design_1_v_frmbuf_wr_0_0_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        width => width,
        height => height,
        stride => stride,
        video_format => video_format,
        frm_buffer => frm_buffer,
        frm_buffer2 => frm_buffer2,
        frm_buffer3 => frm_buffer3,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        flush => flush,
        flush_done => s_axi_CTRL_flush_done);

    mm_video_m_axi_U : component design_1_v_frmbuf_wr_0_0_mm_video_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 105,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 4,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_MM_VIDEO_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MM_VIDEO_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MM_VIDEO_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MM_VIDEO_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MM_VIDEO_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MM_VIDEO_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MM_VIDEO_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MM_VIDEO_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_MM_VIDEO_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MM_VIDEO_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MM_VIDEO_CACHE_VALUE,
        USER_DW => 256,
        USER_AW => 32)
    port map (
        AWVALID => m_axi_mm_video_AWVALID,
        AWREADY => m_axi_mm_video_AWREADY,
        AWADDR => m_axi_mm_video_AWADDR,
        AWID => m_axi_mm_video_AWID,
        AWLEN => m_axi_mm_video_AWLEN,
        AWSIZE => m_axi_mm_video_AWSIZE,
        AWBURST => m_axi_mm_video_AWBURST,
        AWLOCK => m_axi_mm_video_AWLOCK,
        AWCACHE => m_axi_mm_video_AWCACHE,
        AWPROT => m_axi_mm_video_AWPROT,
        AWQOS => m_axi_mm_video_AWQOS,
        AWREGION => m_axi_mm_video_AWREGION,
        AWUSER => m_axi_mm_video_AWUSER,
        WVALID => m_axi_mm_video_WVALID,
        WREADY => m_axi_mm_video_WREADY,
        WDATA => m_axi_mm_video_WDATA,
        WSTRB => m_axi_mm_video_WSTRB,
        WLAST => m_axi_mm_video_WLAST,
        WID => m_axi_mm_video_WID,
        WUSER => m_axi_mm_video_WUSER,
        ARVALID => m_axi_mm_video_ARVALID,
        ARREADY => m_axi_mm_video_ARREADY,
        ARADDR => m_axi_mm_video_ARADDR,
        ARID => m_axi_mm_video_ARID,
        ARLEN => m_axi_mm_video_ARLEN,
        ARSIZE => m_axi_mm_video_ARSIZE,
        ARBURST => m_axi_mm_video_ARBURST,
        ARLOCK => m_axi_mm_video_ARLOCK,
        ARCACHE => m_axi_mm_video_ARCACHE,
        ARPROT => m_axi_mm_video_ARPROT,
        ARQOS => m_axi_mm_video_ARQOS,
        ARREGION => m_axi_mm_video_ARREGION,
        ARUSER => m_axi_mm_video_ARUSER,
        RVALID => m_axi_mm_video_RVALID,
        RREADY => m_axi_mm_video_RREADY,
        RDATA => m_axi_mm_video_RDATA,
        RLAST => m_axi_mm_video_RLAST,
        RID => m_axi_mm_video_RID,
        RUSER => m_axi_mm_video_RUSER,
        RRESP => m_axi_mm_video_RRESP,
        BVALID => m_axi_mm_video_BVALID,
        BREADY => m_axi_mm_video_BREADY,
        BRESP => m_axi_mm_video_BRESP,
        BID => m_axi_mm_video_BID,
        BUSER => m_axi_mm_video_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        flush => flush,
        flush_done => m_axi_mm_video_flush_done,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => mm_video_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => mm_video_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => mm_video_RDATA,
        I_RFIFONUM => mm_video_RFIFONUM,
        I_AWVALID => mm_video_AWVALID,
        I_AWREADY => mm_video_AWREADY,
        I_AWADDR => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_AWADDR,
        I_AWLEN => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_AWLEN,
        I_WVALID => mm_video_WVALID,
        I_WREADY => mm_video_WREADY,
        I_WDATA => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_WDATA,
        I_WSTRB => grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_WSTRB,
        I_BVALID => mm_video_BVALID,
        I_BREADY => mm_video_BREADY);

    mul_15s_3ns_15_1_1_U147 : component design_1_v_frmbuf_wr_0_0_mul_15s_3ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 3,
        dout_WIDTH => 15)
    port map (
        din0 => trunc_ln150_reg_357,
        din1 => mul_ln150_fu_293_p1,
        dout => mul_ln150_fu_293_p2);

    mul_mul_15ns_16ns_31_4_1_U148 : component design_1_v_frmbuf_wr_0_0_mul_mul_15ns_16ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_311_p0,
        din1 => grp_fu_311_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_311_p2);

    regslice_both_s_axis_video_V_data_V_U : component design_1_v_frmbuf_wr_0_0_regslice_both
    generic map (
        DataWidth => 120)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TDATA,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_data_V_U_ack_in,
        data_out => s_axis_video_TDATA_int_regslice,
        vld_out => s_axis_video_TVALID_int_regslice,
        ack_out => s_axis_video_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video_V_data_V_U_apdone_blk);

    regslice_both_s_axis_video_V_keep_V_U : component design_1_v_frmbuf_wr_0_0_regslice_both
    generic map (
        DataWidth => 15)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TKEEP,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_keep_V_U_ack_in,
        data_out => s_axis_video_TKEEP_int_regslice,
        vld_out => regslice_both_s_axis_video_V_keep_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video_V_keep_V_U_apdone_blk);

    regslice_both_s_axis_video_V_strb_V_U : component design_1_v_frmbuf_wr_0_0_regslice_both
    generic map (
        DataWidth => 15)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TSTRB,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_strb_V_U_ack_in,
        data_out => s_axis_video_TSTRB_int_regslice,
        vld_out => regslice_both_s_axis_video_V_strb_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video_V_strb_V_U_apdone_blk);

    regslice_both_s_axis_video_V_user_V_U : component design_1_v_frmbuf_wr_0_0_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TUSER,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_user_V_U_ack_in,
        data_out => s_axis_video_TUSER_int_regslice,
        vld_out => regslice_both_s_axis_video_V_user_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video_V_user_V_U_apdone_blk);

    regslice_both_s_axis_video_V_last_V_U : component design_1_v_frmbuf_wr_0_0_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TLAST,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_last_V_U_ack_in,
        data_out => s_axis_video_TLAST_int_regslice,
        vld_out => regslice_both_s_axis_video_V_last_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video_V_last_V_U_apdone_blk);

    regslice_both_s_axis_video_V_id_V_U : component design_1_v_frmbuf_wr_0_0_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TID,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_id_V_U_ack_in,
        data_out => s_axis_video_TID_int_regslice,
        vld_out => regslice_both_s_axis_video_V_id_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video_V_id_V_U_apdone_blk);

    regslice_both_s_axis_video_V_dest_V_U : component design_1_v_frmbuf_wr_0_0_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TDEST,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_dest_V_U_ack_in,
        data_out => s_axis_video_TDEST_int_regslice,
        vld_out => regslice_both_s_axis_video_V_dest_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_FrmbufWrHlsDataFlow_fu_186_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_FrmbufWrHlsDataFlow_fu_186_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state8_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_sync_reg_grp_FrmbufWrHlsDataFlow_fu_186_ap_done <= ap_const_logic_0;
                elsif ((grp_FrmbufWrHlsDataFlow_fu_186_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_FrmbufWrHlsDataFlow_fu_186_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_FrmbufWrHlsDataFlow_fu_186_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_FrmbufWrHlsDataFlow_fu_186_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state8_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_sync_reg_grp_FrmbufWrHlsDataFlow_fu_186_ap_ready <= ap_const_logic_0;
                elsif ((grp_FrmbufWrHlsDataFlow_fu_186_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_FrmbufWrHlsDataFlow_fu_186_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_FrmbufWrHlsDataFlow_fu_186_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_FrmbufWrHlsDataFlow_fu_186_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_sync_grp_FrmbufWrHlsDataFlow_fu_186_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
                    grp_FrmbufWrHlsDataFlow_fu_186_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_FrmbufWrHlsDataFlow_fu_186_ap_ready = ap_const_logic_1)) then 
                    grp_FrmbufWrHlsDataFlow_fu_186_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    WidthInBytes_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                if ((empty_71_reg_348 = ap_const_lv1_0)) then 
                    WidthInBytes_reg_176 <= mul_ln150_reg_372;
                elsif ((empty_71_reg_348 = ap_const_lv1_1)) then 
                    WidthInBytes_reg_176 <= zext_ln138_1_fu_307_p1;
                end if;
            end if; 
        end if;
    end process;

    s_axi_CTRL_flush_done_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            s_axi_CTRL_flush_done <= (m_axi_mm_video_flush_done);
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                BYTES_PER_PIXEL_load_reg_367 <= BYTES_PER_PIXEL_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                colorFormat_reg_387 <= MEMORY2LIVE_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                empty_63_reg_333 <= empty_63_fu_219_p1;
                empty_64_reg_338 <= empty_64_fu_223_p1;
                empty_71_reg_348 <= empty_71_fu_268_p2;
                empty_reg_328 <= empty_fu_215_p1;
                frm_buffer_read_reg_318 <= frm_buffer;
                stride_read_reg_323 <= stride;
                    zext_ln132_reg_343(15 downto 0) <= zext_ln132_fu_227_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mul_ln150_reg_372 <= mul_ln150_fu_293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (empty_71_fu_268_p2 = ap_const_lv1_0))) then
                trunc_ln150_reg_357 <= trunc_ln150_fu_274_p1;
            end if;
        end if;
    end process;
    zext_ln132_reg_343(31 downto 16) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, empty_71_fu_268_p2, ap_CS_fsm_state8, ap_block_state8_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (empty_71_fu_268_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (empty_71_fu_268_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_boolean_0 = ap_block_state8_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    BYTES_PER_PIXEL_address0 <= zext_ln132_fu_227_p1(6 - 1 downto 0);

    BYTES_PER_PIXEL_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            BYTES_PER_PIXEL_ce0 <= ap_const_logic_1;
        else 
            BYTES_PER_PIXEL_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MEMORY2LIVE_address0 <= zext_ln132_reg_343(6 - 1 downto 0);

    MEMORY2LIVE_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            MEMORY2LIVE_ce0 <= ap_const_logic_1;
        else 
            MEMORY2LIVE_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(ap_block_state8_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state8_on_subcall_done)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state8_on_subcall_done_assign_proc : process(ap_sync_grp_FrmbufWrHlsDataFlow_fu_186_ap_ready, ap_sync_grp_FrmbufWrHlsDataFlow_fu_186_ap_done)
    begin
                ap_block_state8_on_subcall_done <= ((ap_sync_grp_FrmbufWrHlsDataFlow_fu_186_ap_ready and ap_sync_grp_FrmbufWrHlsDataFlow_fu_186_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state8, ap_block_state8_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state8_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, ap_block_state8_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state8_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_FrmbufWrHlsDataFlow_fu_186_ap_done <= (grp_FrmbufWrHlsDataFlow_fu_186_ap_done or ap_sync_reg_grp_FrmbufWrHlsDataFlow_fu_186_ap_done);
    ap_sync_grp_FrmbufWrHlsDataFlow_fu_186_ap_ready <= (grp_FrmbufWrHlsDataFlow_fu_186_ap_ready or ap_sync_reg_grp_FrmbufWrHlsDataFlow_fu_186_ap_ready);
    empty_63_fu_219_p1 <= height(12 - 1 downto 0);
    empty_64_fu_223_p1 <= width(13 - 1 downto 0);
    empty_65_fu_232_p2 <= "1" when (empty_fu_215_p1 = ap_const_lv6_2B) else "0";
    empty_66_fu_238_p2 <= "1" when (empty_fu_215_p1 = ap_const_lv6_19) else "0";
    empty_67_fu_244_p2 <= (empty_66_fu_238_p2 or empty_65_fu_232_p2);
    empty_68_fu_250_p2 <= "1" when (empty_fu_215_p1 = ap_const_lv6_17) else "0";
    empty_69_fu_256_p2 <= (empty_68_fu_250_p2 or empty_67_fu_244_p2);
    empty_70_fu_262_p2 <= "1" when (empty_fu_215_p1 = ap_const_lv6_16) else "0";
    empty_71_fu_268_p2 <= (empty_70_fu_262_p2 or empty_69_fu_256_p2);
    empty_fu_215_p1 <= video_format(6 - 1 downto 0);

    grp_FrmbufWrHlsDataFlow_fu_186_ap_continue_assign_proc : process(ap_CS_fsm_state8, ap_block_state8_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state8_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_FrmbufWrHlsDataFlow_fu_186_ap_continue <= ap_const_logic_1;
        else 
            grp_FrmbufWrHlsDataFlow_fu_186_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_FrmbufWrHlsDataFlow_fu_186_ap_start <= grp_FrmbufWrHlsDataFlow_fu_186_ap_start_reg;
    grp_fu_311_p0 <= grp_fu_311_p00(15 - 1 downto 0);
    grp_fu_311_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_278_p3),31));
    grp_fu_311_p1 <= ap_const_lv31_AAAB(16 - 1 downto 0);

    mm_video_AWVALID_assign_proc : process(ap_CS_fsm_state7, grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_AWVALID, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            mm_video_AWVALID <= grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_AWVALID;
        else 
            mm_video_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    mm_video_BREADY_assign_proc : process(ap_CS_fsm_state7, grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_BREADY, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            mm_video_BREADY <= grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_BREADY;
        else 
            mm_video_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    mm_video_WVALID_assign_proc : process(ap_CS_fsm_state7, grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_WVALID, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            mm_video_WVALID <= grp_FrmbufWrHlsDataFlow_fu_186_m_axi_mm_video_WVALID;
        else 
            mm_video_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln150_fu_293_p1 <= mul_ln150_fu_293_p10(3 - 1 downto 0);
    mul_ln150_fu_293_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(BYTES_PER_PIXEL_load_reg_367),15));
    s_axis_video_TREADY <= regslice_both_s_axis_video_V_data_V_U_ack_in;

    s_axis_video_TREADY_int_regslice_assign_proc : process(grp_FrmbufWrHlsDataFlow_fu_186_s_axis_video_TREADY, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_axis_video_TREADY_int_regslice <= grp_FrmbufWrHlsDataFlow_fu_186_s_axis_video_TREADY;
        else 
            s_axis_video_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln_fu_278_p3 <= (empty_64_fu_223_p1 & ap_const_lv2_0);
    tmp_fu_298_p1 <= grp_fu_311_p2;
    tmp_fu_298_p4 <= tmp_fu_298_p1(30 downto 17);
    trunc_ln150_fu_274_p1 <= width(15 - 1 downto 0);
    zext_ln132_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(video_format),32));
    zext_ln138_1_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_298_p4),15));
end behav;
