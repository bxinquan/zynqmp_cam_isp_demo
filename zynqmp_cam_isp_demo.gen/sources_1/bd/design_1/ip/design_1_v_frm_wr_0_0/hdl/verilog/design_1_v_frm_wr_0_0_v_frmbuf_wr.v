// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="design_1_v_frm_wr_0_0_v_frmbuf_wr,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=6.663000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.863990,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=3969,HLS_SYN_LUT=5466,HLS_VERSION=2022_1}" *)

module design_1_v_frm_wr_0_0_v_frmbuf_wr (
        ap_clk,
        ap_rst_n,
        m_axi_mm_video_AWVALID,
        m_axi_mm_video_AWREADY,
        m_axi_mm_video_AWADDR,
        m_axi_mm_video_AWID,
        m_axi_mm_video_AWLEN,
        m_axi_mm_video_AWSIZE,
        m_axi_mm_video_AWBURST,
        m_axi_mm_video_AWLOCK,
        m_axi_mm_video_AWCACHE,
        m_axi_mm_video_AWPROT,
        m_axi_mm_video_AWQOS,
        m_axi_mm_video_AWREGION,
        m_axi_mm_video_AWUSER,
        m_axi_mm_video_WVALID,
        m_axi_mm_video_WREADY,
        m_axi_mm_video_WDATA,
        m_axi_mm_video_WSTRB,
        m_axi_mm_video_WLAST,
        m_axi_mm_video_WID,
        m_axi_mm_video_WUSER,
        m_axi_mm_video_ARVALID,
        m_axi_mm_video_ARREADY,
        m_axi_mm_video_ARADDR,
        m_axi_mm_video_ARID,
        m_axi_mm_video_ARLEN,
        m_axi_mm_video_ARSIZE,
        m_axi_mm_video_ARBURST,
        m_axi_mm_video_ARLOCK,
        m_axi_mm_video_ARCACHE,
        m_axi_mm_video_ARPROT,
        m_axi_mm_video_ARQOS,
        m_axi_mm_video_ARREGION,
        m_axi_mm_video_ARUSER,
        m_axi_mm_video_RVALID,
        m_axi_mm_video_RREADY,
        m_axi_mm_video_RDATA,
        m_axi_mm_video_RLAST,
        m_axi_mm_video_RID,
        m_axi_mm_video_RUSER,
        m_axi_mm_video_RRESP,
        m_axi_mm_video_BVALID,
        m_axi_mm_video_BREADY,
        m_axi_mm_video_BRESP,
        m_axi_mm_video_BID,
        m_axi_mm_video_BUSER,
        s_axis_video_TDATA,
        s_axis_video_TVALID,
        s_axis_video_TREADY,
        s_axis_video_TKEEP,
        s_axis_video_TSTRB,
        s_axis_video_TUSER,
        s_axis_video_TLAST,
        s_axis_video_TID,
        s_axis_video_TDEST,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MM_VIDEO_ID_WIDTH = 1;
parameter    C_M_AXI_MM_VIDEO_ADDR_WIDTH = 32;
parameter    C_M_AXI_MM_VIDEO_DATA_WIDTH = 128;
parameter    C_M_AXI_MM_VIDEO_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MM_VIDEO_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MM_VIDEO_WUSER_WIDTH = 1;
parameter    C_M_AXI_MM_VIDEO_RUSER_WIDTH = 1;
parameter    C_M_AXI_MM_VIDEO_BUSER_WIDTH = 1;
parameter    C_M_AXI_MM_VIDEO_USER_VALUE = 0;
parameter    C_M_AXI_MM_VIDEO_PROT_VALUE = 0;
parameter    C_M_AXI_MM_VIDEO_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MM_VIDEO_WSTRB_WIDTH = (128 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_mm_video_AWVALID;
input   m_axi_mm_video_AWREADY;
output  [C_M_AXI_MM_VIDEO_ADDR_WIDTH - 1:0] m_axi_mm_video_AWADDR;
output  [C_M_AXI_MM_VIDEO_ID_WIDTH - 1:0] m_axi_mm_video_AWID;
output  [7:0] m_axi_mm_video_AWLEN;
output  [2:0] m_axi_mm_video_AWSIZE;
output  [1:0] m_axi_mm_video_AWBURST;
output  [1:0] m_axi_mm_video_AWLOCK;
output  [3:0] m_axi_mm_video_AWCACHE;
output  [2:0] m_axi_mm_video_AWPROT;
output  [3:0] m_axi_mm_video_AWQOS;
output  [3:0] m_axi_mm_video_AWREGION;
output  [C_M_AXI_MM_VIDEO_AWUSER_WIDTH - 1:0] m_axi_mm_video_AWUSER;
output   m_axi_mm_video_WVALID;
input   m_axi_mm_video_WREADY;
output  [C_M_AXI_MM_VIDEO_DATA_WIDTH - 1:0] m_axi_mm_video_WDATA;
output  [C_M_AXI_MM_VIDEO_WSTRB_WIDTH - 1:0] m_axi_mm_video_WSTRB;
output   m_axi_mm_video_WLAST;
output  [C_M_AXI_MM_VIDEO_ID_WIDTH - 1:0] m_axi_mm_video_WID;
output  [C_M_AXI_MM_VIDEO_WUSER_WIDTH - 1:0] m_axi_mm_video_WUSER;
output   m_axi_mm_video_ARVALID;
input   m_axi_mm_video_ARREADY;
output  [C_M_AXI_MM_VIDEO_ADDR_WIDTH - 1:0] m_axi_mm_video_ARADDR;
output  [C_M_AXI_MM_VIDEO_ID_WIDTH - 1:0] m_axi_mm_video_ARID;
output  [7:0] m_axi_mm_video_ARLEN;
output  [2:0] m_axi_mm_video_ARSIZE;
output  [1:0] m_axi_mm_video_ARBURST;
output  [1:0] m_axi_mm_video_ARLOCK;
output  [3:0] m_axi_mm_video_ARCACHE;
output  [2:0] m_axi_mm_video_ARPROT;
output  [3:0] m_axi_mm_video_ARQOS;
output  [3:0] m_axi_mm_video_ARREGION;
output  [C_M_AXI_MM_VIDEO_ARUSER_WIDTH - 1:0] m_axi_mm_video_ARUSER;
input   m_axi_mm_video_RVALID;
output   m_axi_mm_video_RREADY;
input  [C_M_AXI_MM_VIDEO_DATA_WIDTH - 1:0] m_axi_mm_video_RDATA;
input   m_axi_mm_video_RLAST;
input  [C_M_AXI_MM_VIDEO_ID_WIDTH - 1:0] m_axi_mm_video_RID;
input  [C_M_AXI_MM_VIDEO_RUSER_WIDTH - 1:0] m_axi_mm_video_RUSER;
input  [1:0] m_axi_mm_video_RRESP;
input   m_axi_mm_video_BVALID;
output   m_axi_mm_video_BREADY;
input  [1:0] m_axi_mm_video_BRESP;
input  [C_M_AXI_MM_VIDEO_ID_WIDTH - 1:0] m_axi_mm_video_BID;
input  [C_M_AXI_MM_VIDEO_BUSER_WIDTH - 1:0] m_axi_mm_video_BUSER;
input  [63:0] s_axis_video_TDATA;
input   s_axis_video_TVALID;
output   s_axis_video_TREADY;
input  [7:0] s_axis_video_TKEEP;
input  [7:0] s_axis_video_TSTRB;
input  [0:0] s_axis_video_TUSER;
input  [0:0] s_axis_video_TLAST;
input  [0:0] s_axis_video_TID;
input  [0:0] s_axis_video_TDEST;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [15:0] width;
wire   [15:0] height;
wire   [15:0] stride;
wire   [15:0] video_format;
wire   [31:0] frm_buffer;
wire   [31:0] frm_buffer2;
wire   [31:0] frm_buffer3;
wire   [5:0] BYTES_PER_PIXEL_address0;
reg    BYTES_PER_PIXEL_ce0;
wire   [2:0] BYTES_PER_PIXEL_q0;
wire   [5:0] MEMORY2LIVE_address0;
reg    MEMORY2LIVE_ce0;
wire   [2:0] MEMORY2LIVE_q0;
reg   [31:0] frm_buffer_read_reg_317;
reg   [15:0] stride_read_reg_322;
wire   [5:0] empty_fu_213_p1;
reg   [5:0] empty_reg_327;
wire   [11:0] empty_59_fu_217_p1;
reg   [11:0] empty_59_reg_332;
wire   [11:0] empty_60_fu_221_p1;
reg   [11:0] empty_60_reg_337;
wire   [14:0] zext_ln132_1_fu_225_p1;
reg   [14:0] zext_ln132_1_reg_342;
wire   [31:0] zext_ln132_fu_229_p1;
reg   [31:0] zext_ln132_reg_347;
wire   [0:0] empty_67_fu_270_p2;
reg   [0:0] empty_67_reg_352;
wire   [14:0] mul_ln150_fu_292_p2;
wire    ap_CS_fsm_state2;
wire   [14:0] zext_ln139_fu_306_p1;
wire    ap_CS_fsm_state5;
reg   [2:0] colorFormat_reg_381;
wire    ap_CS_fsm_state6;
wire    grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_AWVALID;
wire   [31:0] grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_AWADDR;
wire   [0:0] grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_AWID;
wire   [31:0] grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_AWLEN;
wire   [2:0] grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_AWSIZE;
wire   [1:0] grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_AWBURST;
wire   [1:0] grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_AWLOCK;
wire   [3:0] grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_AWCACHE;
wire   [2:0] grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_AWPROT;
wire   [3:0] grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_AWQOS;
wire   [3:0] grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_AWREGION;
wire   [0:0] grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_AWUSER;
wire    grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_WVALID;
wire   [127:0] grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_WDATA;
wire   [15:0] grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_WSTRB;
wire    grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_WLAST;
wire   [0:0] grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_WID;
wire   [0:0] grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_WUSER;
wire    grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_ARVALID;
wire   [31:0] grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_ARADDR;
wire   [0:0] grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_ARID;
wire   [31:0] grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_ARLEN;
wire   [2:0] grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_ARSIZE;
wire   [1:0] grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_ARBURST;
wire   [1:0] grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_ARLOCK;
wire   [3:0] grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_ARCACHE;
wire   [2:0] grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_ARPROT;
wire   [3:0] grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_ARQOS;
wire   [3:0] grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_ARREGION;
wire   [0:0] grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_ARUSER;
wire    grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_RREADY;
wire    grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_BREADY;
wire    grp_FrmbufWrHlsDataFlow_fu_184_ap_start;
wire    grp_FrmbufWrHlsDataFlow_fu_184_s_axis_video_TREADY;
wire    grp_FrmbufWrHlsDataFlow_fu_184_ap_done;
wire    grp_FrmbufWrHlsDataFlow_fu_184_ap_ready;
wire    grp_FrmbufWrHlsDataFlow_fu_184_ap_idle;
reg    grp_FrmbufWrHlsDataFlow_fu_184_ap_continue;
wire    flush;
reg    s_axi_CTRL_flush_done;
wire    m_axi_mm_video_flush_done;
reg    mm_video_AWVALID;
wire    mm_video_AWREADY;
reg    mm_video_WVALID;
wire    mm_video_WREADY;
wire    mm_video_ARREADY;
wire    mm_video_RVALID;
wire   [127:0] mm_video_RDATA;
wire   [8:0] mm_video_RFIFONUM;
wire    mm_video_BVALID;
reg    mm_video_BREADY;
reg   [14:0] WidthInBytes_reg_174;
reg    grp_FrmbufWrHlsDataFlow_fu_184_ap_start_reg;
wire    ap_CS_fsm_state7;
wire    ap_sync_grp_FrmbufWrHlsDataFlow_fu_184_ap_ready;
wire    ap_sync_grp_FrmbufWrHlsDataFlow_fu_184_ap_done;
reg    ap_block_state7_on_subcall_done;
reg    ap_sync_reg_grp_FrmbufWrHlsDataFlow_fu_184_ap_ready;
reg    ap_sync_reg_grp_FrmbufWrHlsDataFlow_fu_184_ap_done;
wire   [0:0] empty_62_fu_240_p2;
wire   [0:0] empty_61_fu_234_p2;
wire   [0:0] empty_64_fu_252_p2;
wire   [0:0] empty_63_fu_246_p2;
wire   [0:0] empty_66_fu_264_p2;
wire   [0:0] empty_65_fu_258_p2;
wire   [13:0] shl_ln_fu_276_p3;
wire   [11:0] mul_ln150_fu_292_p0;
wire   [2:0] mul_ln150_fu_292_p1;
wire   [28:0] tmp_fu_297_p1;
wire  signed [28:0] grp_fu_310_p2;
wire   [12:0] tmp_fu_297_p4;
wire   [13:0] grp_fu_310_p0;
wire   [14:0] grp_fu_310_p1;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
wire    regslice_both_s_axis_video_V_data_V_U_apdone_blk;
wire   [63:0] s_axis_video_TDATA_int_regslice;
wire    s_axis_video_TVALID_int_regslice;
reg    s_axis_video_TREADY_int_regslice;
wire    regslice_both_s_axis_video_V_data_V_U_ack_in;
wire    regslice_both_s_axis_video_V_keep_V_U_apdone_blk;
wire   [7:0] s_axis_video_TKEEP_int_regslice;
wire    regslice_both_s_axis_video_V_keep_V_U_vld_out;
wire    regslice_both_s_axis_video_V_keep_V_U_ack_in;
wire    regslice_both_s_axis_video_V_strb_V_U_apdone_blk;
wire   [7:0] s_axis_video_TSTRB_int_regslice;
wire    regslice_both_s_axis_video_V_strb_V_U_vld_out;
wire    regslice_both_s_axis_video_V_strb_V_U_ack_in;
wire    regslice_both_s_axis_video_V_user_V_U_apdone_blk;
wire   [0:0] s_axis_video_TUSER_int_regslice;
wire    regslice_both_s_axis_video_V_user_V_U_vld_out;
wire    regslice_both_s_axis_video_V_user_V_U_ack_in;
wire    regslice_both_s_axis_video_V_last_V_U_apdone_blk;
wire   [0:0] s_axis_video_TLAST_int_regslice;
wire    regslice_both_s_axis_video_V_last_V_U_vld_out;
wire    regslice_both_s_axis_video_V_last_V_U_ack_in;
wire    regslice_both_s_axis_video_V_id_V_U_apdone_blk;
wire   [0:0] s_axis_video_TID_int_regslice;
wire    regslice_both_s_axis_video_V_id_V_U_vld_out;
wire    regslice_both_s_axis_video_V_id_V_U_ack_in;
wire    regslice_both_s_axis_video_V_dest_V_U_apdone_blk;
wire   [0:0] s_axis_video_TDEST_int_regslice;
wire    regslice_both_s_axis_video_V_dest_V_U_vld_out;
wire    regslice_both_s_axis_video_V_dest_V_U_ack_in;
wire   [28:0] grp_fu_310_p00;
wire   [14:0] mul_ln150_fu_292_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 grp_FrmbufWrHlsDataFlow_fu_184_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_FrmbufWrHlsDataFlow_fu_184_ap_ready = 1'b0;
#0 ap_sync_reg_grp_FrmbufWrHlsDataFlow_fu_184_ap_done = 1'b0;
end

design_1_v_frm_wr_0_0_BYTES_PER_PIXEL_ROM_AUTO_1R #(
    .DataWidth( 3 ),
    .AddressRange( 44 ),
    .AddressWidth( 6 ))
BYTES_PER_PIXEL_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(BYTES_PER_PIXEL_address0),
    .ce0(BYTES_PER_PIXEL_ce0),
    .q0(BYTES_PER_PIXEL_q0)
);

design_1_v_frm_wr_0_0_MEMORY2LIVE_ROM_AUTO_1R #(
    .DataWidth( 3 ),
    .AddressRange( 44 ),
    .AddressWidth( 6 ))
MEMORY2LIVE_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(MEMORY2LIVE_address0),
    .ce0(MEMORY2LIVE_ce0),
    .q0(MEMORY2LIVE_q0)
);

design_1_v_frm_wr_0_0_FrmbufWrHlsDataFlow grp_FrmbufWrHlsDataFlow_fu_184(
    .s_axis_video_TDATA(s_axis_video_TDATA_int_regslice),
    .s_axis_video_TKEEP(s_axis_video_TKEEP_int_regslice),
    .s_axis_video_TSTRB(s_axis_video_TSTRB_int_regslice),
    .s_axis_video_TUSER(s_axis_video_TUSER_int_regslice),
    .s_axis_video_TLAST(s_axis_video_TLAST_int_regslice),
    .s_axis_video_TID(s_axis_video_TID_int_regslice),
    .s_axis_video_TDEST(s_axis_video_TDEST_int_regslice),
    .m_axi_mm_video_AWVALID(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_AWVALID),
    .m_axi_mm_video_AWREADY(mm_video_AWREADY),
    .m_axi_mm_video_AWADDR(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_AWADDR),
    .m_axi_mm_video_AWID(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_AWID),
    .m_axi_mm_video_AWLEN(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_AWLEN),
    .m_axi_mm_video_AWSIZE(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_AWSIZE),
    .m_axi_mm_video_AWBURST(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_AWBURST),
    .m_axi_mm_video_AWLOCK(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_AWLOCK),
    .m_axi_mm_video_AWCACHE(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_AWCACHE),
    .m_axi_mm_video_AWPROT(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_AWPROT),
    .m_axi_mm_video_AWQOS(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_AWQOS),
    .m_axi_mm_video_AWREGION(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_AWREGION),
    .m_axi_mm_video_AWUSER(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_AWUSER),
    .m_axi_mm_video_WVALID(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_WVALID),
    .m_axi_mm_video_WREADY(mm_video_WREADY),
    .m_axi_mm_video_WDATA(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_WDATA),
    .m_axi_mm_video_WSTRB(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_WSTRB),
    .m_axi_mm_video_WLAST(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_WLAST),
    .m_axi_mm_video_WID(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_WID),
    .m_axi_mm_video_WUSER(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_WUSER),
    .m_axi_mm_video_ARVALID(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_ARVALID),
    .m_axi_mm_video_ARREADY(1'b0),
    .m_axi_mm_video_ARADDR(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_ARADDR),
    .m_axi_mm_video_ARID(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_ARID),
    .m_axi_mm_video_ARLEN(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_ARLEN),
    .m_axi_mm_video_ARSIZE(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_ARSIZE),
    .m_axi_mm_video_ARBURST(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_ARBURST),
    .m_axi_mm_video_ARLOCK(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_ARLOCK),
    .m_axi_mm_video_ARCACHE(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_ARCACHE),
    .m_axi_mm_video_ARPROT(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_ARPROT),
    .m_axi_mm_video_ARQOS(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_ARQOS),
    .m_axi_mm_video_ARREGION(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_ARREGION),
    .m_axi_mm_video_ARUSER(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_ARUSER),
    .m_axi_mm_video_RVALID(1'b0),
    .m_axi_mm_video_RREADY(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_RREADY),
    .m_axi_mm_video_RDATA(128'd0),
    .m_axi_mm_video_RLAST(1'b0),
    .m_axi_mm_video_RID(1'd0),
    .m_axi_mm_video_RFIFONUM(9'd0),
    .m_axi_mm_video_RUSER(1'd0),
    .m_axi_mm_video_RRESP(2'd0),
    .m_axi_mm_video_BVALID(mm_video_BVALID),
    .m_axi_mm_video_BREADY(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_BREADY),
    .m_axi_mm_video_BRESP(2'd0),
    .m_axi_mm_video_BID(1'd0),
    .m_axi_mm_video_BUSER(1'd0),
    .HwReg_frm_buffer(frm_buffer_read_reg_317),
    .p_read(WidthInBytes_reg_174),
    .p_read1(colorFormat_reg_381),
    .p_read2(empty_60_reg_337),
    .p_read3(empty_59_reg_332),
    .p_read14(stride_read_reg_322),
    .p_read25(empty_reg_327),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .HwReg_frm_buffer_ap_vld(1'b1),
    .p_read_ap_vld(1'b1),
    .p_read14_ap_vld(1'b1),
    .p_read25_ap_vld(1'b1),
    .ap_start(grp_FrmbufWrHlsDataFlow_fu_184_ap_start),
    .s_axis_video_TVALID(s_axis_video_TVALID_int_regslice),
    .s_axis_video_TREADY(grp_FrmbufWrHlsDataFlow_fu_184_s_axis_video_TREADY),
    .p_read3_ap_vld(1'b1),
    .p_read2_ap_vld(1'b1),
    .p_read1_ap_vld(1'b1),
    .ap_done(grp_FrmbufWrHlsDataFlow_fu_184_ap_done),
    .ap_ready(grp_FrmbufWrHlsDataFlow_fu_184_ap_ready),
    .ap_idle(grp_FrmbufWrHlsDataFlow_fu_184_ap_idle),
    .ap_continue(grp_FrmbufWrHlsDataFlow_fu_184_ap_continue)
);

design_1_v_frm_wr_0_0_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .width(width),
    .height(height),
    .stride(stride),
    .video_format(video_format),
    .frm_buffer(frm_buffer),
    .frm_buffer2(frm_buffer2),
    .frm_buffer3(frm_buffer3),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .flush(flush),
    .flush_done(s_axi_CTRL_flush_done)
);

design_1_v_frm_wr_0_0_mm_video_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 105 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 4 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MM_VIDEO_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MM_VIDEO_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MM_VIDEO_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MM_VIDEO_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MM_VIDEO_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MM_VIDEO_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MM_VIDEO_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MM_VIDEO_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_MM_VIDEO_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MM_VIDEO_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MM_VIDEO_CACHE_VALUE ),
    .USER_DW( 128 ),
    .USER_AW( 32 ))
mm_video_m_axi_U(
    .AWVALID(m_axi_mm_video_AWVALID),
    .AWREADY(m_axi_mm_video_AWREADY),
    .AWADDR(m_axi_mm_video_AWADDR),
    .AWID(m_axi_mm_video_AWID),
    .AWLEN(m_axi_mm_video_AWLEN),
    .AWSIZE(m_axi_mm_video_AWSIZE),
    .AWBURST(m_axi_mm_video_AWBURST),
    .AWLOCK(m_axi_mm_video_AWLOCK),
    .AWCACHE(m_axi_mm_video_AWCACHE),
    .AWPROT(m_axi_mm_video_AWPROT),
    .AWQOS(m_axi_mm_video_AWQOS),
    .AWREGION(m_axi_mm_video_AWREGION),
    .AWUSER(m_axi_mm_video_AWUSER),
    .WVALID(m_axi_mm_video_WVALID),
    .WREADY(m_axi_mm_video_WREADY),
    .WDATA(m_axi_mm_video_WDATA),
    .WSTRB(m_axi_mm_video_WSTRB),
    .WLAST(m_axi_mm_video_WLAST),
    .WID(m_axi_mm_video_WID),
    .WUSER(m_axi_mm_video_WUSER),
    .ARVALID(m_axi_mm_video_ARVALID),
    .ARREADY(m_axi_mm_video_ARREADY),
    .ARADDR(m_axi_mm_video_ARADDR),
    .ARID(m_axi_mm_video_ARID),
    .ARLEN(m_axi_mm_video_ARLEN),
    .ARSIZE(m_axi_mm_video_ARSIZE),
    .ARBURST(m_axi_mm_video_ARBURST),
    .ARLOCK(m_axi_mm_video_ARLOCK),
    .ARCACHE(m_axi_mm_video_ARCACHE),
    .ARPROT(m_axi_mm_video_ARPROT),
    .ARQOS(m_axi_mm_video_ARQOS),
    .ARREGION(m_axi_mm_video_ARREGION),
    .ARUSER(m_axi_mm_video_ARUSER),
    .RVALID(m_axi_mm_video_RVALID),
    .RREADY(m_axi_mm_video_RREADY),
    .RDATA(m_axi_mm_video_RDATA),
    .RLAST(m_axi_mm_video_RLAST),
    .RID(m_axi_mm_video_RID),
    .RUSER(m_axi_mm_video_RUSER),
    .RRESP(m_axi_mm_video_RRESP),
    .BVALID(m_axi_mm_video_BVALID),
    .BREADY(m_axi_mm_video_BREADY),
    .BRESP(m_axi_mm_video_BRESP),
    .BID(m_axi_mm_video_BID),
    .BUSER(m_axi_mm_video_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .flush(flush),
    .flush_done(m_axi_mm_video_flush_done),
    .I_ARVALID(1'b0),
    .I_ARREADY(mm_video_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARLEN(32'd0),
    .I_RVALID(mm_video_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(mm_video_RDATA),
    .I_RFIFONUM(mm_video_RFIFONUM),
    .I_AWVALID(mm_video_AWVALID),
    .I_AWREADY(mm_video_AWREADY),
    .I_AWADDR(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_AWADDR),
    .I_AWLEN(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_AWLEN),
    .I_WVALID(mm_video_WVALID),
    .I_WREADY(mm_video_WREADY),
    .I_WDATA(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_WDATA),
    .I_WSTRB(grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_WSTRB),
    .I_BVALID(mm_video_BVALID),
    .I_BREADY(mm_video_BREADY)
);

design_1_v_frm_wr_0_0_mul_12ns_3ns_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 15 ))
mul_12ns_3ns_15_1_1_U141(
    .din0(mul_ln150_fu_292_p0),
    .din1(mul_ln150_fu_292_p1),
    .dout(mul_ln150_fu_292_p2)
);

design_1_v_frm_wr_0_0_mul_mul_14ns_15ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 29 ))
mul_mul_14ns_15ns_29_4_1_U142(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_310_p0),
    .din1(grp_fu_310_p1),
    .ce(1'b1),
    .dout(grp_fu_310_p2)
);

design_1_v_frm_wr_0_0_regslice_both #(
    .DataWidth( 64 ))
regslice_both_s_axis_video_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TDATA),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_data_V_U_ack_in),
    .data_out(s_axis_video_TDATA_int_regslice),
    .vld_out(s_axis_video_TVALID_int_regslice),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video_V_data_V_U_apdone_blk)
);

design_1_v_frm_wr_0_0_regslice_both #(
    .DataWidth( 8 ))
regslice_both_s_axis_video_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TKEEP),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_keep_V_U_ack_in),
    .data_out(s_axis_video_TKEEP_int_regslice),
    .vld_out(regslice_both_s_axis_video_V_keep_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video_V_keep_V_U_apdone_blk)
);

design_1_v_frm_wr_0_0_regslice_both #(
    .DataWidth( 8 ))
regslice_both_s_axis_video_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TSTRB),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_strb_V_U_ack_in),
    .data_out(s_axis_video_TSTRB_int_regslice),
    .vld_out(regslice_both_s_axis_video_V_strb_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video_V_strb_V_U_apdone_blk)
);

design_1_v_frm_wr_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TUSER),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_user_V_U_ack_in),
    .data_out(s_axis_video_TUSER_int_regslice),
    .vld_out(regslice_both_s_axis_video_V_user_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video_V_user_V_U_apdone_blk)
);

design_1_v_frm_wr_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TLAST),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_last_V_U_ack_in),
    .data_out(s_axis_video_TLAST_int_regslice),
    .vld_out(regslice_both_s_axis_video_V_last_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video_V_last_V_U_apdone_blk)
);

design_1_v_frm_wr_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TID),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_id_V_U_ack_in),
    .data_out(s_axis_video_TID_int_regslice),
    .vld_out(regslice_both_s_axis_video_V_id_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video_V_id_V_U_apdone_blk)
);

design_1_v_frm_wr_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TDEST),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_dest_V_U_ack_in),
    .data_out(s_axis_video_TDEST_int_regslice),
    .vld_out(regslice_both_s_axis_video_V_dest_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_FrmbufWrHlsDataFlow_fu_184_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state7_on_subcall_done) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_sync_reg_grp_FrmbufWrHlsDataFlow_fu_184_ap_done <= 1'b0;
        end else if ((grp_FrmbufWrHlsDataFlow_fu_184_ap_done == 1'b1)) begin
            ap_sync_reg_grp_FrmbufWrHlsDataFlow_fu_184_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_FrmbufWrHlsDataFlow_fu_184_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state7_on_subcall_done) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_sync_reg_grp_FrmbufWrHlsDataFlow_fu_184_ap_ready <= 1'b0;
        end else if ((grp_FrmbufWrHlsDataFlow_fu_184_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_FrmbufWrHlsDataFlow_fu_184_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_FrmbufWrHlsDataFlow_fu_184_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state6) | ((ap_sync_grp_FrmbufWrHlsDataFlow_fu_184_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state7)))) begin
            grp_FrmbufWrHlsDataFlow_fu_184_ap_start_reg <= 1'b1;
        end else if ((grp_FrmbufWrHlsDataFlow_fu_184_ap_ready == 1'b1)) begin
            grp_FrmbufWrHlsDataFlow_fu_184_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        WidthInBytes_reg_174 <= mul_ln150_fu_292_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (empty_67_reg_352 == 1'd1))) begin
        WidthInBytes_reg_174 <= zext_ln139_fu_306_p1;
    end
end

always @ (posedge ap_clk) begin
    s_axi_CTRL_flush_done <= m_axi_mm_video_flush_done;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        colorFormat_reg_381 <= MEMORY2LIVE_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_59_reg_332 <= empty_59_fu_217_p1;
        empty_60_reg_337 <= empty_60_fu_221_p1;
        empty_67_reg_352 <= empty_67_fu_270_p2;
        empty_reg_327 <= empty_fu_213_p1;
        frm_buffer_read_reg_317 <= frm_buffer;
        stride_read_reg_322 <= stride;
        zext_ln132_1_reg_342[11 : 0] <= zext_ln132_1_fu_225_p1[11 : 0];
        zext_ln132_reg_347[15 : 0] <= zext_ln132_fu_229_p1[15 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        BYTES_PER_PIXEL_ce0 = 1'b1;
    end else begin
        BYTES_PER_PIXEL_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        MEMORY2LIVE_ce0 = 1'b1;
    end else begin
        MEMORY2LIVE_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state7_on_subcall_done)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7_on_subcall_done) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7_on_subcall_done) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7_on_subcall_done) & (1'b1 == ap_CS_fsm_state7))) begin
        grp_FrmbufWrHlsDataFlow_fu_184_ap_continue = 1'b1;
    end else begin
        grp_FrmbufWrHlsDataFlow_fu_184_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        mm_video_AWVALID = grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_AWVALID;
    end else begin
        mm_video_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        mm_video_BREADY = grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_BREADY;
    end else begin
        mm_video_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        mm_video_WVALID = grp_FrmbufWrHlsDataFlow_fu_184_m_axi_mm_video_WVALID;
    end else begin
        mm_video_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        s_axis_video_TREADY_int_regslice = grp_FrmbufWrHlsDataFlow_fu_184_s_axis_video_TREADY;
    end else begin
        s_axis_video_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (empty_67_fu_270_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (empty_67_fu_270_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b0 == ap_block_state7_on_subcall_done) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign BYTES_PER_PIXEL_address0 = zext_ln132_fu_229_p1;

assign MEMORY2LIVE_address0 = zext_ln132_reg_347;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state7_on_subcall_done = ((ap_sync_grp_FrmbufWrHlsDataFlow_fu_184_ap_ready & ap_sync_grp_FrmbufWrHlsDataFlow_fu_184_ap_done) == 1'b0);
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_FrmbufWrHlsDataFlow_fu_184_ap_done = (grp_FrmbufWrHlsDataFlow_fu_184_ap_done | ap_sync_reg_grp_FrmbufWrHlsDataFlow_fu_184_ap_done);

assign ap_sync_grp_FrmbufWrHlsDataFlow_fu_184_ap_ready = (grp_FrmbufWrHlsDataFlow_fu_184_ap_ready | ap_sync_reg_grp_FrmbufWrHlsDataFlow_fu_184_ap_ready);

assign empty_59_fu_217_p1 = height[11:0];

assign empty_60_fu_221_p1 = width[11:0];

assign empty_61_fu_234_p2 = ((empty_fu_213_p1 == 6'd43) ? 1'b1 : 1'b0);

assign empty_62_fu_240_p2 = ((empty_fu_213_p1 == 6'd25) ? 1'b1 : 1'b0);

assign empty_63_fu_246_p2 = (empty_62_fu_240_p2 | empty_61_fu_234_p2);

assign empty_64_fu_252_p2 = ((empty_fu_213_p1 == 6'd23) ? 1'b1 : 1'b0);

assign empty_65_fu_258_p2 = (empty_64_fu_252_p2 | empty_63_fu_246_p2);

assign empty_66_fu_264_p2 = ((empty_fu_213_p1 == 6'd22) ? 1'b1 : 1'b0);

assign empty_67_fu_270_p2 = (empty_66_fu_264_p2 | empty_65_fu_258_p2);

assign empty_fu_213_p1 = video_format[5:0];

assign grp_FrmbufWrHlsDataFlow_fu_184_ap_start = grp_FrmbufWrHlsDataFlow_fu_184_ap_start_reg;

assign grp_fu_310_p0 = grp_fu_310_p00;

assign grp_fu_310_p00 = shl_ln_fu_276_p3;

assign grp_fu_310_p1 = 29'd21846;

assign mul_ln150_fu_292_p0 = zext_ln132_1_reg_342;

assign mul_ln150_fu_292_p1 = mul_ln150_fu_292_p10;

assign mul_ln150_fu_292_p10 = BYTES_PER_PIXEL_q0;

assign s_axis_video_TREADY = regslice_both_s_axis_video_V_data_V_U_ack_in;

assign shl_ln_fu_276_p3 = {{empty_60_fu_221_p1}, {2'd0}};

assign tmp_fu_297_p1 = grp_fu_310_p2;

assign tmp_fu_297_p4 = {{tmp_fu_297_p1[28:16]}};

assign zext_ln132_1_fu_225_p1 = empty_60_fu_221_p1;

assign zext_ln132_fu_229_p1 = video_format;

assign zext_ln139_fu_306_p1 = tmp_fu_297_p4;

always @ (posedge ap_clk) begin
    zext_ln132_1_reg_342[14:12] <= 3'b000;
    zext_ln132_reg_347[31:16] <= 16'b0000000000000000;
end


reg find_df_deadlock = 0;
// synthesis translate_off
`include "design_1_v_frm_wr_0_0_hls_deadlock_detector.vh"
// synthesis translate_on

reg find_kernel_block = 0;
// synthesis translate_off
`include "design_1_v_frm_wr_0_0_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //design_1_v_frm_wr_0_0_v_frmbuf_wr

