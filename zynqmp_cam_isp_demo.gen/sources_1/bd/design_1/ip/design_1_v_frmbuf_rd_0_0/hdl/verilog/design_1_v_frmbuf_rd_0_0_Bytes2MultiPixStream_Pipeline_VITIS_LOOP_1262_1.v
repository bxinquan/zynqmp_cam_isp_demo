// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module design_1_v_frmbuf_rd_0_0_Bytes2MultiPixStream_Pipeline_VITIS_LOOP_1262_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        img_din,
        img_num_data_valid,
        img_fifo_cap,
        img_full_n,
        img_write,
        trunc_ln1249_1,
        icmp_ln1252,
        cmp125_6,
        cmp125_5,
        cmp125_4,
        cmp125_3,
        cmp125_2,
        cmp125_1,
        bytePlanes1_dout,
        bytePlanes1_num_data_valid,
        bytePlanes1_fifo_cap,
        bytePlanes1_empty_n,
        bytePlanes1_read,
        sub121_cast16,
        cmp125
);

parameter    ap_ST_fsm_pp0_stage0 = 8'd1;
parameter    ap_ST_fsm_pp0_stage1 = 8'd2;
parameter    ap_ST_fsm_pp0_stage2 = 8'd4;
parameter    ap_ST_fsm_pp0_stage3 = 8'd8;
parameter    ap_ST_fsm_pp0_stage4 = 8'd16;
parameter    ap_ST_fsm_pp0_stage5 = 8'd32;
parameter    ap_ST_fsm_pp0_stage6 = 8'd64;
parameter    ap_ST_fsm_pp0_stage7 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [29:0] img_din;
input  [1:0] img_num_data_valid;
input  [1:0] img_fifo_cap;
input   img_full_n;
output   img_write;
input  [12:0] trunc_ln1249_1;
input  [0:0] icmp_ln1252;
input  [0:0] cmp125_6;
input  [0:0] cmp125_5;
input  [0:0] cmp125_4;
input  [0:0] cmp125_3;
input  [0:0] cmp125_2;
input  [0:0] cmp125_1;
input  [63:0] bytePlanes1_dout;
input  [10:0] bytePlanes1_num_data_valid;
input  [10:0] bytePlanes1_fifo_cap;
input   bytePlanes1_empty_n;
output   bytePlanes1_read;
input  [12:0] sub121_cast16;
input  [0:0] cmp125;

reg ap_idle;
reg[29:0] img_din;
reg img_write;
reg bytePlanes1_read;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] or_ln1278_7_reg_462;
reg    ap_block_state9_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1262_fu_193_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage7;
reg   [0:0] icmp_ln1262_reg_430;
reg   [0:0] or_ln1278_6_reg_458;
reg    ap_predicate_op84_write_state8;
reg    ap_block_state8_pp0_stage7_iter0;
reg    ap_block_pp0_stage7_subdone;
reg    bytePlanes1_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    img_blk_n;
reg   [0:0] or_ln1278_reg_434;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg   [0:0] or_ln1278_1_reg_438;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
reg   [0:0] or_ln1278_2_reg_442;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
reg   [0:0] or_ln1278_3_reg_446;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
reg   [0:0] or_ln1278_4_reg_450;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
reg   [0:0] or_ln1278_5_reg_454;
wire    ap_block_pp0_stage7;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] or_ln1278_fu_215_p2;
wire   [0:0] or_ln1278_1_fu_221_p2;
wire   [0:0] or_ln1278_2_fu_227_p2;
wire   [0:0] or_ln1278_3_fu_233_p2;
wire   [0:0] or_ln1278_4_fu_239_p2;
wire   [0:0] or_ln1278_5_fu_245_p2;
wire   [0:0] or_ln1278_6_fu_251_p2;
wire   [0:0] or_ln1278_7_fu_257_p2;
reg   [7:0] tmp_1_reg_466;
reg    ap_predicate_op59_write_state2;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
reg   [7:0] tmp_2_reg_471;
reg   [7:0] tmp_4_reg_476;
reg   [7:0] tmp_7_reg_481;
reg   [7:0] tmp_9_reg_486;
reg   [7:0] tmp_s_reg_491;
reg   [7:0] tmp_3_reg_496;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [12:0] x_fu_104;
wire   [12:0] x_4_fu_199_p2;
wire    ap_loop_init;
reg   [12:0] ap_sig_allocacmp_x_3;
wire   [29:0] p_s_fu_272_p4;
reg    ap_block_pp0_stage1_01001;
wire   [29:0] p_5_fu_353_p4;
reg    ap_predicate_op69_write_state3;
reg    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_01001;
wire   [29:0] p_6_fu_363_p4;
reg    ap_predicate_op72_write_state4;
reg    ap_block_state4_pp0_stage3_iter0;
reg    ap_block_pp0_stage3_01001;
wire   [29:0] p_7_fu_373_p4;
reg    ap_predicate_op75_write_state5;
reg    ap_block_state5_pp0_stage4_iter0;
reg    ap_block_pp0_stage4_01001;
wire   [29:0] p_8_fu_383_p4;
reg    ap_predicate_op78_write_state6;
reg    ap_block_state6_pp0_stage5_iter0;
reg    ap_block_pp0_stage5_01001;
wire   [29:0] p_9_fu_393_p4;
reg    ap_predicate_op81_write_state7;
reg    ap_block_state7_pp0_stage6_iter0;
reg    ap_block_pp0_stage6_01001;
wire   [29:0] p_10_fu_403_p4;
reg    ap_block_pp0_stage7_01001;
wire   [29:0] p_0_fu_413_p4;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp0_stage2_11001;
reg    ap_block_pp0_stage3_11001;
reg    ap_block_pp0_stage4_11001;
reg    ap_block_pp0_stage5_11001;
reg    ap_block_pp0_stage6_11001;
reg    ap_block_pp0_stage7_11001;
wire   [13:0] zext_ln1262_fu_205_p1;
wire  signed [13:0] sub121_cast16_cast_fu_181_p1;
wire   [0:0] cmp122_fu_209_p2;
wire   [7:0] trunc_ln232_fu_268_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 or_ln1278_7_reg_462 = 1'd0;
#0 icmp_ln1262_reg_430 = 1'd0;
#0 or_ln1278_6_reg_458 = 1'd0;
#0 or_ln1278_reg_434 = 1'd0;
#0 or_ln1278_1_reg_438 = 1'd0;
#0 or_ln1278_2_reg_442 = 1'd0;
#0 or_ln1278_3_reg_446 = 1'd0;
#0 or_ln1278_4_reg_450 = 1'd0;
#0 or_ln1278_5_reg_454 = 1'd0;
#0 tmp_1_reg_466 = 8'd0;
#0 tmp_2_reg_471 = 8'd0;
#0 tmp_4_reg_476 = 8'd0;
#0 tmp_7_reg_481 = 8'd0;
#0 tmp_9_reg_486 = 8'd0;
#0 tmp_s_reg_491 = 8'd0;
#0 tmp_3_reg_496 = 8'd0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 x_fu_104 = 13'd0;
#0 ap_done_reg = 1'b0;
end

design_1_v_frmbuf_rd_0_0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        icmp_ln1262_reg_430 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            icmp_ln1262_reg_430 <= icmp_ln1262_fu_193_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        or_ln1278_1_reg_438 <= 1'd0;
    end else begin
        if (((icmp_ln1262_fu_193_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            or_ln1278_1_reg_438 <= or_ln1278_1_fu_221_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        or_ln1278_2_reg_442 <= 1'd0;
    end else begin
        if (((icmp_ln1262_fu_193_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            or_ln1278_2_reg_442 <= or_ln1278_2_fu_227_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        or_ln1278_3_reg_446 <= 1'd0;
    end else begin
        if (((icmp_ln1262_fu_193_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            or_ln1278_3_reg_446 <= or_ln1278_3_fu_233_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        or_ln1278_4_reg_450 <= 1'd0;
    end else begin
        if (((icmp_ln1262_fu_193_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            or_ln1278_4_reg_450 <= or_ln1278_4_fu_239_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        or_ln1278_5_reg_454 <= 1'd0;
    end else begin
        if (((icmp_ln1262_fu_193_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            or_ln1278_5_reg_454 <= or_ln1278_5_fu_245_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        or_ln1278_6_reg_458 <= 1'd0;
    end else begin
        if (((icmp_ln1262_fu_193_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            or_ln1278_6_reg_458 <= or_ln1278_6_fu_251_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        or_ln1278_7_reg_462 <= 1'd0;
    end else begin
        if (((icmp_ln1262_fu_193_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            or_ln1278_7_reg_462 <= or_ln1278_7_fu_257_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        or_ln1278_reg_434 <= 1'd0;
    end else begin
        if (((icmp_ln1262_fu_193_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            or_ln1278_reg_434 <= or_ln1278_fu_215_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_1_reg_466 <= 8'd0;
    end else begin
        if (((icmp_ln1262_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            tmp_1_reg_466 <= {{bytePlanes1_dout[15:8]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_2_reg_471 <= 8'd0;
    end else begin
        if (((icmp_ln1262_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            tmp_2_reg_471 <= {{bytePlanes1_dout[23:16]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_3_reg_496 <= 8'd0;
    end else begin
        if (((icmp_ln1262_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            tmp_3_reg_496 <= {{bytePlanes1_dout[63:56]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_4_reg_476 <= 8'd0;
    end else begin
        if (((icmp_ln1262_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            tmp_4_reg_476 <= {{bytePlanes1_dout[31:24]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_7_reg_481 <= 8'd0;
    end else begin
        if (((icmp_ln1262_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            tmp_7_reg_481 <= {{bytePlanes1_dout[39:32]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_9_reg_486 <= 8'd0;
    end else begin
        if (((icmp_ln1262_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            tmp_9_reg_486 <= {{bytePlanes1_dout[47:40]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_s_reg_491 <= 8'd0;
    end else begin
        if (((icmp_ln1262_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            tmp_s_reg_491 <= {{bytePlanes1_dout[55:48]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_fu_104 <= 13'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            if (((icmp_ln1262_fu_193_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                x_fu_104 <= x_4_fu_199_p2;
            end else if ((ap_loop_init == 1'b1)) begin
                x_fu_104 <= 13'd0;
            end
        end
    end
end

always @ (*) begin
    if (((icmp_ln1262_fu_193_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage7_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_x_3 = 13'd0;
    end else begin
        ap_sig_allocacmp_x_3 = x_fu_104;
    end
end

always @ (*) begin
    if (((icmp_ln1262_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        bytePlanes1_blk_n = bytePlanes1_empty_n;
    end else begin
        bytePlanes1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1262_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        bytePlanes1_read = 1'b1;
    end else begin
        bytePlanes1_read = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_predicate_op84_write_state8 == 1'b1) & (1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((icmp_ln1262_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (or_ln1278_5_reg_454 == 1'd1)) | ((icmp_ln1262_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (or_ln1278_4_reg_450 == 1'd1)) | ((icmp_ln1262_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (or_ln1278_3_reg_446 == 1'd1)) | ((icmp_ln1262_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (or_ln1278_2_reg_442 == 1'd1)) | ((icmp_ln1262_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (or_ln1278_1_reg_438 == 1'd1)) | ((icmp_ln1262_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (or_ln1278_reg_434 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0) & (or_ln1278_7_reg_462 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        img_blk_n = img_full_n;
    end else begin
        img_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (or_ln1278_7_reg_462 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_din = p_0_fu_413_p4;
    end else if (((ap_predicate_op84_write_state8 == 1'b1) & (1'b0 == ap_block_pp0_stage7_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        img_din = p_10_fu_403_p4;
    end else if (((1'b0 == ap_block_pp0_stage6_01001) & (ap_predicate_op81_write_state7 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        img_din = p_9_fu_393_p4;
    end else if (((1'b0 == ap_block_pp0_stage5_01001) & (ap_predicate_op78_write_state6 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        img_din = p_8_fu_383_p4;
    end else if (((1'b0 == ap_block_pp0_stage4_01001) & (ap_predicate_op75_write_state5 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        img_din = p_7_fu_373_p4;
    end else if (((1'b0 == ap_block_pp0_stage3_01001) & (ap_predicate_op72_write_state4 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        img_din = p_6_fu_363_p4;
    end else if (((1'b0 == ap_block_pp0_stage2_01001) & (ap_predicate_op69_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        img_din = p_5_fu_353_p4;
    end else if (((1'b0 == ap_block_pp0_stage1_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op59_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        img_din = p_s_fu_272_p4;
    end else begin
        img_din = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op84_write_state8 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_predicate_op81_write_state7 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_predicate_op78_write_state6 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_predicate_op75_write_state5 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_predicate_op72_write_state4 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_predicate_op69_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op59_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (or_ln1278_7_reg_462 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        img_write = 1'b1;
    end else begin
        img_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((or_ln1278_7_reg_462 == 1'd1) & (img_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((or_ln1278_7_reg_462 == 1'd1) & (img_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((or_ln1278_7_reg_462 == 1'd1) & (img_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((img_full_n == 1'b0) & (ap_predicate_op59_write_state2 == 1'b1)) | ((bytePlanes1_empty_n == 1'b0) & (icmp_ln1262_reg_430 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((img_full_n == 1'b0) & (ap_predicate_op59_write_state2 == 1'b1)) | ((bytePlanes1_empty_n == 1'b0) & (icmp_ln1262_reg_430 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((img_full_n == 1'b0) & (ap_predicate_op59_write_state2 == 1'b1)) | ((bytePlanes1_empty_n == 1'b0) & (icmp_ln1262_reg_430 == 1'd0))));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_01001 = ((img_full_n == 1'b0) & (ap_predicate_op69_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((img_full_n == 1'b0) & (ap_predicate_op69_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((img_full_n == 1'b0) & (ap_predicate_op69_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_01001 = ((img_full_n == 1'b0) & (ap_predicate_op72_write_state4 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((img_full_n == 1'b0) & (ap_predicate_op72_write_state4 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((img_full_n == 1'b0) & (ap_predicate_op72_write_state4 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_01001 = ((img_full_n == 1'b0) & (ap_predicate_op75_write_state5 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((img_full_n == 1'b0) & (ap_predicate_op75_write_state5 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((img_full_n == 1'b0) & (ap_predicate_op75_write_state5 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_01001 = ((img_full_n == 1'b0) & (ap_predicate_op78_write_state6 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((img_full_n == 1'b0) & (ap_predicate_op78_write_state6 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((img_full_n == 1'b0) & (ap_predicate_op78_write_state6 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_01001 = ((img_full_n == 1'b0) & (ap_predicate_op81_write_state7 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((img_full_n == 1'b0) & (ap_predicate_op81_write_state7 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((img_full_n == 1'b0) & (ap_predicate_op81_write_state7 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_01001 = ((ap_predicate_op84_write_state8 == 1'b1) & (img_full_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage7_11001 = ((ap_predicate_op84_write_state8 == 1'b1) & (img_full_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((ap_predicate_op84_write_state8 == 1'b1) & (img_full_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = (((img_full_n == 1'b0) & (ap_predicate_op59_write_state2 == 1'b1)) | ((bytePlanes1_empty_n == 1'b0) & (icmp_ln1262_reg_430 == 1'd0)));
end

always @ (*) begin
    ap_block_state3_pp0_stage2_iter0 = ((img_full_n == 1'b0) & (ap_predicate_op69_write_state3 == 1'b1));
end

always @ (*) begin
    ap_block_state4_pp0_stage3_iter0 = ((img_full_n == 1'b0) & (ap_predicate_op72_write_state4 == 1'b1));
end

always @ (*) begin
    ap_block_state5_pp0_stage4_iter0 = ((img_full_n == 1'b0) & (ap_predicate_op75_write_state5 == 1'b1));
end

always @ (*) begin
    ap_block_state6_pp0_stage5_iter0 = ((img_full_n == 1'b0) & (ap_predicate_op78_write_state6 == 1'b1));
end

always @ (*) begin
    ap_block_state7_pp0_stage6_iter0 = ((img_full_n == 1'b0) & (ap_predicate_op81_write_state7 == 1'b1));
end

always @ (*) begin
    ap_block_state8_pp0_stage7_iter0 = ((ap_predicate_op84_write_state8 == 1'b1) & (img_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state9_pp0_stage0_iter1 = ((or_ln1278_7_reg_462 == 1'd1) & (img_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op59_write_state2 = ((icmp_ln1262_reg_430 == 1'd0) & (or_ln1278_reg_434 == 1'd1));
end

always @ (*) begin
    ap_predicate_op69_write_state3 = ((icmp_ln1262_reg_430 == 1'd0) & (or_ln1278_1_reg_438 == 1'd1));
end

always @ (*) begin
    ap_predicate_op72_write_state4 = ((icmp_ln1262_reg_430 == 1'd0) & (or_ln1278_2_reg_442 == 1'd1));
end

always @ (*) begin
    ap_predicate_op75_write_state5 = ((icmp_ln1262_reg_430 == 1'd0) & (or_ln1278_3_reg_446 == 1'd1));
end

always @ (*) begin
    ap_predicate_op78_write_state6 = ((icmp_ln1262_reg_430 == 1'd0) & (or_ln1278_4_reg_450 == 1'd1));
end

always @ (*) begin
    ap_predicate_op81_write_state7 = ((icmp_ln1262_reg_430 == 1'd0) & (or_ln1278_5_reg_454 == 1'd1));
end

always @ (*) begin
    ap_predicate_op84_write_state8 = ((or_ln1278_6_reg_458 == 1'd1) & (icmp_ln1262_reg_430 == 1'd0));
end

assign cmp122_fu_209_p2 = (($signed(zext_ln1262_fu_205_p1) < $signed(sub121_cast16_cast_fu_181_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1262_fu_193_p2 = ((ap_sig_allocacmp_x_3 == trunc_ln1249_1) ? 1'b1 : 1'b0);

assign or_ln1278_1_fu_221_p2 = (cmp125_1 | cmp122_fu_209_p2);

assign or_ln1278_2_fu_227_p2 = (cmp125_2 | cmp122_fu_209_p2);

assign or_ln1278_3_fu_233_p2 = (cmp125_3 | cmp122_fu_209_p2);

assign or_ln1278_4_fu_239_p2 = (cmp125_4 | cmp122_fu_209_p2);

assign or_ln1278_5_fu_245_p2 = (cmp125_5 | cmp122_fu_209_p2);

assign or_ln1278_6_fu_251_p2 = (cmp125_6 | cmp122_fu_209_p2);

assign or_ln1278_7_fu_257_p2 = (icmp_ln1252 | cmp122_fu_209_p2);

assign or_ln1278_fu_215_p2 = (cmp125 | cmp122_fu_209_p2);

assign p_0_fu_413_p4 = {{{{20'd524800}, {tmp_3_reg_496}}}, {2'd0}};

assign p_10_fu_403_p4 = {{{{20'd524800}, {tmp_s_reg_491}}}, {2'd0}};

assign p_5_fu_353_p4 = {{{{20'd524800}, {tmp_1_reg_466}}}, {2'd0}};

assign p_6_fu_363_p4 = {{{{20'd524800}, {tmp_2_reg_471}}}, {2'd0}};

assign p_7_fu_373_p4 = {{{{20'd524800}, {tmp_4_reg_476}}}, {2'd0}};

assign p_8_fu_383_p4 = {{{{20'd524800}, {tmp_7_reg_481}}}, {2'd0}};

assign p_9_fu_393_p4 = {{{{20'd524800}, {tmp_9_reg_486}}}, {2'd0}};

assign p_s_fu_272_p4 = {{{{20'd524800}, {trunc_ln232_fu_268_p1}}}, {2'd0}};

assign sub121_cast16_cast_fu_181_p1 = $signed(sub121_cast16);

assign trunc_ln232_fu_268_p1 = bytePlanes1_dout[7:0];

assign x_4_fu_199_p2 = (ap_sig_allocacmp_x_3 + 13'd1);

assign zext_ln1262_fu_205_p1 = ap_sig_allocacmp_x_3;

endmodule //design_1_v_frmbuf_rd_0_0_Bytes2MultiPixStream_Pipeline_VITIS_LOOP_1262_1
